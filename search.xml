<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2023/07/05/%E8%84%91%E6%AD%BB%E4%BA%A1%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/07/05/%E8%84%91%E6%AD%BB%E4%BA%A1%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: 有关项目学习</span><br><span class="line">date: 2023-07-05 15:18:22</span><br><span class="line">tags:</span><br><span class="line">    - 项目</span><br><span class="line">cover: https://i.postimg.cc/KvWf5hGR/OIP.jpg</span><br></pre></td></tr></table></figure><h4 id="EnableCaching"><a href="#EnableCaching" class="headerlink" title="@EnableCaching"></a>@EnableCaching</h4><ol><li>@EnableCaching注解：是一个SpringFramework注解，用于启用Spring的缓存管理功能、使用@EnableCaching注解的类会被Spring容器扫描，并在运行时动态地生成代理类来拦截对缓存的访问请求，从而实现缓存的自动清理</li></ol><h4 id="Assert"><a href="#Assert" class="headerlink" title="Assert"></a>Assert</h4><ul><li>提供了一些静态方法，用于在程序运行时进行断言（assertion），以检查程序中的某些条件是否成立。如果断言失败，即某些条件不成立，就会抛出 AssertionError 异常，以通知开发人员程序中存在的问题。</li><li>Assert.notNull(phone) 是 Spring Framework 提供的一个断言方法，用于判断参数是否为 null。如果参数为 null，该方法会抛出一个 IllegalArgumentException 异常，并带有一条自定义的错误信息。</li></ul><h4 id="RedisTemplate"><a href="#RedisTemplate" class="headerlink" title="RedisTemplate"></a>RedisTemplate</h4><ul><li><code>RedisTemplate</code> 是 Spring Data Redis 提供的一个泛型类，用于简化 Redis 操作的编写。它封装了 Redis 的操作，提供了一系列的方法，可以方便地进行 Redis 的读写操作。在 RedisTemplate 中，Key 和 Value 都可以是任何类型的对象，而不仅仅是字符串。</li></ul><h4 id="ZSetOperations"><a href="#ZSetOperations" class="headerlink" title="ZSetOperations"></a>ZSetOperations</h4><ul><li><code>ZSetOperations</code> 是 Spring Data Redis 提供的一个操作 Redis Sorted Set（有序集合）的接口，它定义了一系列操作 Sorted Set 的方法，包括添加元素、获取元素、删除元素、获取排名和分数范围内的元素等等。Sorted Set 是 Redis 中的一种数据结构，它是一个有序的、不重复的、可重复的元素集合，每个元素都会关联一个分数，根据分数的大小对元素进行排序。</li></ul><h4 id="每个类的作用"><a href="#每个类的作用" class="headerlink" title="每个类的作用"></a>每个类的作用</h4><ul><li>BaseResponse：封装API接口的相应数据</li><li>BaseRequest：用于封装API接口的请求数据</li><li>UserReq：定义了两个内部类，用于封装与用户相关的请求数据，</li><li>UserResp：UserResp 类的作用是封装响应给客户端的用户信息。 内部类 BaseUserResp 用于封装基本的用户信息，只有一个令牌属性 token。</li><li>ErrorMessage：定义一个枚举类型ErrorMessage，用于封装系统，参数和业务相关的错误信息</li></ul><h4 id="秒杀设计——前台权限相关"><a href="#秒杀设计——前台权限相关" class="headerlink" title="秒杀设计——前台权限相关"></a>秒杀设计——前台权限相关</h4><ul><li><p>如何发送验证码：</p><ol><li>验证手机号是否为注册用户手机号，如果不是报错</li><li>生成随机数字，然后调用第三方接口给用户发送短信验证码</li><li>将随机数保存在Redis，给接口调用方返回成功信号</li></ol></li><li><p>如何登录：</p><ol><li>先验证用户输入的短信验证码是否正确</li><li>验证成功后删除Redis中的短信验证码</li><li>生成登录用的token，下发token</li></ol></li><li><p>如何实现权限验证相关的</p><ul><li>使用Filter拦截器</li></ul></li></ul><h4 id="后台权限设计-SpringSecurity"><a href="#后台权限设计-SpringSecurity" class="headerlink" title="后台权限设计 SpringSecurity"></a>后台权限设计 SpringSecurity</h4><p>SpringSecurity的核心功能：认证、授权、攻击防护。</p><p>SpringSecurity的核心类：WebSecurityConfigurerAdepter:自定义Security策略，AuthenticationManagerBuilder:自定义认证策略，@enableWebSecurity:开启WebSecurity模式。</p><h4 id="分布式环境唯一ID"><a href="#分布式环境唯一ID" class="headerlink" title="分布式环境唯一ID"></a>分布式环境唯一ID</h4><ol><li><p>场景：</p><ol><li>电商订单业务中，高并发场景下，大量的用户同时访问同一个接口，保证订单号的唯一性，识别和跟踪订单，防止订单冲突和重复，并发控制和数据一致性。</li><li>在支付、交易等系统中，需要对大量的数据和消息进行唯一标识，需要一个能够生成全局唯一的ID系统，保证数据准确性、交易追踪、并发控制、安全性</li></ol></li><li><p>处理办法：UUID，数据库自增算法、各类生成算法</p></li><li><p>UUID：<code>UUID代表通用唯一标识符（Universally Unique Identifier），它是一个用于在计算系统中唯一标识信息的标准。UUID由32位的十六进制数字表示，通常使用连字符分隔为五个部分，例如：550e8400-e29b-41d4-a716-446655440000。</code></p><p>​作用：<code>UUID通常用于识别数据库记录、系统配置、网络通信等场景。它的设计目的是保证在分布式系统中生成的标识符的唯一性，即使在不同的节点生成标识符时也能保持一致性。</code></p></li><li><p>各类生成算法：</p><ol><li><code>跟上面数据库自增类似，采用分布式中间件，一般是使用redis,时间+分布式值，可以确保唯一</code></li><li><code>时间+机器标识+自增序列，也可以保证唯一</code></li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/03/Spring/"/>
      <url>/2023/07/03/Spring/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: Spring学习</span><br><span class="line">date: 2023-07-03 11:00:00</span><br><span class="line">tags: </span><br><span class="line">    - 学习</span><br><span class="line">cover: https://img2.baidu.com/it/u=2951102358,151621292&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=500&amp;h=889</span><br></pre></td></tr></table></figure><h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><p><code>Spring 是分层的 Java SE/EE 应用 full-stack 轻量级开源框架，以 **IoC（Inverse Of Control：反转控制）和 AOP（Aspect Oriented Programming：面向切面编程）**为内核，提供了**展现层** **Spring MVC** 和**持久层 Spring JDBC 以及业务层事务管理**等众多的企业级应用技术，还能整合开源世界众多著名的**第三方框架**和类库，逐渐成为使用最多的 Java EE 企业应用开源框架。</code></p><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><ul><li>通过 Spring 提供的 IoC 容器，可以将对象间的依赖关系交由 Spring 进行控制，避免硬编码所造成的过度程序耦合。</li><li>通过 Spring 的 AOP 功能，方便进行面向切面的编程，许多不容易用传统 OOP 实现的功能可以通过 AOP 轻松应付。</li><li><code>声明式事务的支持</code></li><li><code>方便程序的测试</code></li><li><code>方便集成各种优秀框架</code></li><li><code>Java 源码是经典学习范例</code></li></ul><p><img src="https://bmw-pic.oss-cn-beijing.aliyuncs.com/img/20230630122342.png" alt="image-20230629111904914"></p><h4 id="两大特性："><a href="#两大特性：" class="headerlink" title="两大特性："></a>两大特性：</h4><ol><li><p><strong>IOC(Inversion of Control)控制反转</strong></p><ul><li>释义：将创建对象的权力交给框架</li><li>作用：解耦，消除代码中的依赖关系</li><li>实现：通过工厂模式被动获取：App获取对象是由工厂提供，工厂去控制资源，这样资源有问题也不会直接影响APP；</li><li>两种方式：（1）XML配置        （2）注解</li></ul></li><li><p><strong>AOP(Aspect Oriented Programming) 面向切面编程</strong></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>明朝八股</title>
      <link href="/2023/06/20/%E9%9D%A2%E8%AF%95/"/>
      <url>/2023/06/20/%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="明朝进士"><a href="#明朝进士" class="headerlink" title="明朝进士"></a><span style="color:pink;">明朝进士</span></h1><h4 id="java创建对象的方式"><a href="#java创建对象的方式" class="headerlink" title="java创建对象的方式"></a>java创建对象的方式</h4><ul><li>用new语句创建对象 </li><li>使用反射,使用Class.newInstance()创建对象</li><li>调用对象的clone()方法</li><li>运用反序列化手段,调用java.io.ObjectInputStream对象的readObject()方法.</li></ul><h4 id="java多态的实现原理和应用场景"><a href="#java多态的实现原理和应用场景" class="headerlink" title="java多态的实现原理和应用场景"></a>java多态的实现原理和应用场景</h4><ul><li><p>定义：不同类的对象对同一消息做出不同的响应叫做多态</p></li><li><p>存在的三个条件：</p><ul><li><p>有继承关系；</p></li><li><p>子类重写了父类方法</p></li><li><p>父类引用指向子类对象</p></li></ul></li><li><p>分类</p><ul><li>编译时多态，方法的重载</li><li>运行时多态，方法的重写</li></ul></li></ul><h4 id="接口和抽象类的区别"><a href="#接口和抽象类的区别" class="headerlink" title="接口和抽象类的区别"></a>接口和抽象类的区别</h4><ol><li>一个类可以实现多个接口，但一个类只能继承一个抽象类</li><li>抽象类的成员变量可以是各种类型的,接口中的成员变量只能是public static final类型;</li><li>抽象类中可以有静态代码块和静态方法,而接口中不含有静态代码块和静态方法</li><li>接口没有构造方法,抽象类有构造方法;</li></ol><h4 id="JDK和JRE有什么区别"><a href="#JDK和JRE有什么区别" class="headerlink" title="JDK和JRE有什么区别"></a>JDK和JRE有什么区别</h4><ul><li>JDK时java开发工具包，包含了Java编译器（javac）、Java虚拟机（JVM）、Java类库等工具和组件，可以用于开发、编译、调试和运行Java应用程序。</li><li>JRE是Java运行环境，包含了Java虚拟机（JVM）和Java类库等组件，可以用于运行Java应用程序。</li><li>JDK是用于开发Java应用程序的工具包，是JRE是用于运行Java应用程序的运行时环境</li></ul><h4 id="final关键字能加在抽象类上吗？为什么？"><a href="#final关键字能加在抽象类上吗？为什么？" class="headerlink" title="final关键字能加在抽象类上吗？为什么？"></a>final关键字能加在抽象类上吗？为什么？</h4><p>final关键字不能用于抽象类的定义上，因为final关键字表示该类不能被继承，而抽象类的定义就是为了被继承和实现的</p><h4 id="面向对象的三大特性，能分别聊聊吗？"><a href="#面向对象的三大特性，能分别聊聊吗？" class="headerlink" title="面向对象的三大特性，能分别聊聊吗？"></a>面向对象的三大特性，能分别聊聊吗？</h4><ul><li>封装：封装隐藏对象的属性，并且外界只能通过对外提供的接口进行访问，这个对外提供的接口一般是指get方法。<ul><li>通过封装，我们提高了代码的复用性</li><li>通过封装，带来的高内聚和低耦合</li></ul></li><li>继承：子类可以复用父类的成员和方法，并且可以在现有代码的基础上进行功能扩展。按照继承方式，有三种继承方式，分别是public、protected、private。</li><li>多态：</li></ul><h4 id="x3D-x3D-和equals的区别"><a href="#x3D-x3D-和equals的区别" class="headerlink" title="&#x3D;&#x3D;和equals的区别"></a>&#x3D;&#x3D;和equals的区别</h4><ul><li>&#x3D;&#x3D;：①如果比较的对象是<strong>基本数据类型</strong>，则比较的是其<strong>存储的值</strong>是否相等；<br>②如果比较的是<strong>引用数据类型</strong>，则比较的是<strong>所指向对象的地址值</strong>是否相等（是否是同一个对象）。</li><li>equals：没有重写Object的方法，用来比较两个<strong>对象的地址值</strong>是否相等，重写了比较两个对象内容相同，内容相同对象相同，内容不同对象不同。</li></ul><h4 id="为什么重写了equals方法就一定要重写hashcode-方法"><a href="#为什么重写了equals方法就一定要重写hashcode-方法" class="headerlink" title="为什么重写了equals方法就一定要重写hashcode()方法"></a>为什么重写了equals方法就一定要重写hashcode()方法</h4><p>hashcode()方法用来定义索引位置，以提高效率的同时，可能会发生哈希冲突，</p><p>如果只重写了hashcode()方法，当哈希冲突发生时，即使两个对象相等也不会判定为重复，导致数组里会存储大量相同元素。</p><p>如果只重写了equals方法，那两个相等的对象，内存地址可能会相等，也会存储大量相同元素。</p><h4 id="String源码，String的equals方法，String为什么是不可变的"><a href="#String源码，String的equals方法，String为什么是不可变的" class="headerlink" title="String源码，String的equals方法，String为什么是不可变的"></a>String源码，String的equals方法，String为什么是不可变的</h4><ul><li><p>Java 8 String类的源码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public final class String</span><br><span class="line">implements java.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123;</span><br><span class="line">    private final char value[];// The value is used for character storage. </span><br><span class="line">    </span><br><span class="line">    private int hash; // Default to 0// Cache the hash code for the string </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出String对象内部是一个个字符,储存在Char[]数组中,并且用final修饰</p></li><li><p>String 的equals方法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   public boolean equals(Object anObject) &#123;</span><br><span class="line">// 判断两个字符串是否为同一个对象</span><br><span class="line">if(this == anObject) &#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">//判断传入的对象是否为String类型的实例或其子类的实例</span><br><span class="line">if(anObject instanceof String) &#123;</span><br><span class="line">//若果是，则强制转换为String并赋值给anotherString</span><br><span class="line">String anotherString = (String) anobject;</span><br><span class="line">int n = value.length;</span><br><span class="line">if(n == anotherString.value.length) &#123;</span><br><span class="line">char v1[] = value;</span><br><span class="line">char v2[] = anotherString.value;</span><br><span class="line">int i = 0;</span><br><span class="line">while(n11 != 0) &#123;</span><br><span class="line">if(v1[i] != v2[i])</span><br><span class="line">return false;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">//通过比较两个字符串的字符数组value中的每一个字符来判断它们是否相等。如果两个字符数组中的每个字符都相等，则说明两个字符串相等，返回true；否则，说明它们不相等，返回false。</span><br></pre></td></tr></table></figure></li></ul><h4 id="String的最大长度"><a href="#String的最大长度" class="headerlink" title="String的最大长度"></a>String的最大长度</h4><p>String类提供了一个length方法，返回值为int类型，而int类型的取值为2^31-1.所以理论上String的最大长度为2^31-1</p><h4 id="new-String和字面量创建区别和相同点"><a href="#new-String和字面量创建区别和相同点" class="headerlink" title="new String和字面量创建区别和相同点"></a>new String和字面量创建区别和相同点</h4><p>在Java中，可以使用两种方式来创建字符串：使用字面量创建字符串和使用new 关键字创建字符串对象。</p><ul><li><p>区别：</p><ul><li><p>字面量创建字符串时,java会在内存中创建一个字符串常量池，将字符串直接存储在常量池中，而不是在堆内存中创建对象。而使用new 关键字创建字符串时，Java会在堆内存中创建一个新的字符串对象。</p></li><li><p>字面量创建字符串时，如果字符串常量池中已经存在了相同的字符串，则会直接返回该字符串的引用；而使用new关键字创建字符串时，无论字符串是否已经存在，都会在堆内存中创建一个新的字符串对象。</p></li><li><p>字面量创建的字符串是不可变的，即字符串的值在创建时就已经确定，不能修改；而使用new关键字创建的字符串是可变的，可以通过方法修改字符串的值。</p></li></ul></li><li><p>相同点：</p><ul><li><p>无论是使用字面量还是new关键字创建字符串都可以使用String类中定义的方法来操作字符串。</p></li><li><p>都可以使用字符串的引用来访问字符串的值。</p></li></ul></li></ul><h4 id="String-“-”-的内部实现"><a href="#String-“-”-的内部实现" class="headerlink" title="String “+” 的内部实现"></a>String “+” 的内部实现</h4><p>首先创建一个StringBuilder或StringBuffer对象，然后调用append方法进行拼接，最后调用toString方法来获得连接后的字符串</p><h4 id="StringBuilder和StringBuffer的区别"><a href="#StringBuilder和StringBuffer的区别" class="headerlink" title="StringBuilder和StringBuffer的区别"></a>StringBuilder和StringBuffer的区别</h4><ul><li><p>StringBuffer是线程安全的，StringBuilder不是线程安全的。因为StringBuffer会使用synchronized关键字修饰</p></li><li><p>StringBuilder比StringBuffer更快，因为StringBuilder不会进行线程同步。</p></li></ul><p>​在java中，数组一旦在堆内存中创建，长度是固定的</p><h4 id="ArrayList和LinkedList的区别，ArrayList的初始容量（10）"><a href="#ArrayList和LinkedList的区别，ArrayList的初始容量（10）" class="headerlink" title="ArrayList和LinkedList的区别，ArrayList的初始容量（10）"></a>ArrayList和LinkedList的区别，ArrayList的初始容量（10）</h4><ul><li>ArrayList的底层是动态数组实现的，LinkList是基于双向链表实现的。</li><li>访问效率不同：ArrayList支持快速随机访问元素，因为它内部使用的是数组，可以根据索引直接访问元素。而linkedList需要从头或尾开始遍历列表，直到找到需要的元素</li><li>插入和删除元素的效率不同：ArrayList在中间插入或删除元素时需要进行数组的复制和移动操作，而LinkedList在插入或删除元素时只需要改变相邻节点的指针。</li><li>内存消耗不同：ArrayList基于数组实现，所以需要预先分配存储空间，可能会浪费一些空间，而LinkedList则不需要预先分配存储空间，它的存储空间会随着元素的增加而动态地分配。</li></ul><h4 id="ArrayList的初始化，增，删除"><a href="#ArrayList的初始化，增，删除" class="headerlink" title="ArrayList的初始化，增，删除"></a>ArrayList的初始化，增，删除</h4><ul><li>初始化：创建ArrayList对象时，可以使用无参构造（初始容量为10）或带有初始容量参数的构造函数来初始化ArrayList。</li><li>增add：（1）首先，ArrayList会判断数组元素是否达到数组容量，如果达到，则会触发扩容操作（grow方法）扩容为原来的1.5倍。（2）然后，ArrayList会将从指定位置开始向右移动一个位置，为新元素腾出位置。（3）接着，ArrayList会将新元素插入到指定位置，并将数组元素数量加1.（ps：如果指定的位置超过了当前数组元素数量，则会抛出IndexOutOfBoundsException异常。）</li><li>扩容具体操作：</li><li><pre><code class="java">private void grow(int minCapacity) &#123;    // 获取当前 ArrayList 的容量    int oldCapacity = elementData.length;    // 计算扩容后的容量，扩容为原来的 1.5 倍    int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);    // 如果扩容后的容量小于最小需要的容量，则将最小需要的容量作为扩容后的容量    if (newCapacity - minCapacity &lt; 0) &#123;        newCapacity = minCapacity;    &#125;    // 如果扩容后的容量超出了数组的最大容量，则将数组的容量设置为 Integer.MAX_VALUE    if (newCapacity - MAX_ARRAY_SIZE &gt; 0) &#123;        newCapacity = hugeCapacity(minCapacity);    &#125;    // 将原数组中的元素复制到新数组中    elementData = Arrays.copyOf(elementData, newCapacity);&#125;private static int hugeCapacity(int minCapacity) &#123;    if (minCapacity &lt; 0) &#123;        throw new OutOfMemoryError();    &#125;    return (minCapacity &gt; MAX_ARRAY_SIZE) ? Integer.MAX_VALUE : MAX_ARRAY_SIZE;&#125;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 删除remove()：（1）首先，ArrayList会检查指定位置是否合法。如果指定位置小于0或大于等于数组元素数量，则会抛出IndexOutOfBoundsException异常。（2）然后，ArrayList会将制定位置的元素从数组中删除，并将数组中该位置后面的所有元素向左移动一个位置。（3）最后，ArrayList会将数组元素数量减1，并返回被删除的元素。</span><br><span class="line"></span><br><span class="line">#### ArrayList的底层扩容机制</span><br><span class="line"></span><br><span class="line">1. 首先，ArrayList会创建一个新的数组，其大小为原数组的1.5倍（在Java7及其以前的版本中，数组大小为原数组的2倍）。</span><br><span class="line">2. 然后，ArrayList会将原数组中的元素复制到新数组中。</span><br><span class="line">3. 最后，ArrayList会将新数组设置为其内部数组，并将原数组释放</span><br><span class="line"></span><br><span class="line">#### LinkedHashMap是如何实现LRU的？</span><br><span class="line"></span><br><span class="line">LinkedHashMap实现LRU的方式是通过维护一个双向链表和一个哈希表，双向链表按照访问顺序存储所有元素，哈希表用于快速查找元素。每次访问元素时，将该元素移动到链表尾部，当容量超出限制时，删除链表头部的元素。</span><br><span class="line"></span><br><span class="line">#### LRU算法</span><br><span class="line"></span><br><span class="line">LRU是Least Recently Used的缩写，意为最近最少使用。LRU算法是一种常用的页面置换算法，它根据页面最近被访问的时间来选择淘汰的页面。</span><br><span class="line"></span><br><span class="line">LRU算法的基本思想是，当缓存满时，淘汰最近最少使用的页面，保留最近使用频率较高的页面。具体来说，LRU算法维护一个页面访问历史记录，每次页面被访问时，将其置于历史记录的最前面，当缓存满时，淘汰历史记录最后面的页面。这样就可以保证最近被访问过的页面能够被优先保留，从而提高缓存的命中率。</span><br><span class="line"></span><br><span class="line">#### x.equal(y)==true,但却可有不同的hashcode，这句话对不对，为什么？</span><br><span class="line"></span><br><span class="line">这句话对，因为hashCode的计算方式并不唯一，不同的对象可能具有相同的hashCode，但是equals方法在判断相等性时是依据对象的实际内容进行比较的，因此可能出现hashCode不同但equals相等的情况。这种情况在HashMap等集合类中经常出现。</span><br><span class="line"></span><br><span class="line">[Hash底层](https://blog.csdn.net/suifeng629/article/details/82179996)</span><br><span class="line"></span><br><span class="line">[更强的HashMap底层](https://fking.blog.csdn.net/article/details/106030431?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-106030431-blog-98510619.235^v38^pc_relevant_anti_t3_base&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-106030431-blog-98510619.235^v38^pc_relevant_anti_t3_base&amp;utm_relevant_index=1))</span><br><span class="line"></span><br><span class="line">[HashMap夺命！鸡哥都扛不住啦（^.^）](https://mp.weixin.qq.com/s/keA-xNOHxMUPAFxKnna-Bg)</span><br><span class="line"></span><br><span class="line">#### HashMap的底层实现</span><br><span class="line"></span><br><span class="line">在JDK1.7采用数组＋链表实现；JDK1.8中采用数组+链表+红黑树实现，当链表长度为8才转成红黑树；</span><br><span class="line"></span><br><span class="line">#### 为什么链表长度为8才转成红黑树？，4和16不可以？</span><br><span class="line"></span><br><span class="line">为什么选择链表长度为8进行转换的阈值，而不是4或16等其他值呢？这涉及到对链表和红黑树性能特征的权衡。当链表长度较短（小于等于8）时，链表的遍历操作是高效的，转换为红黑树可能会引入额外的开销。而当链表长度过长时，遍历链表的开销会变得很大，此时使用红黑树可以提供更高效的操作。</span><br><span class="line"></span><br><span class="line">#### 为什么负载因子设置的是0.75?</span><br><span class="line"></span><br><span class="line">如果设置成1。空间利用更充分，但是这样会发生大量的hash碰撞。有些位置的链表会很长，就不利于查询。省空间而费时间。</span><br><span class="line">如果设置成0.5，hash碰撞的几率小了很多，但是会频繁扩容，费空间而省时间。</span><br><span class="line"></span><br><span class="line">#### HahMap的实现:查询一个key的时候干了什么?</span><br><span class="line"></span><br><span class="line">1. 计算key的哈希值：HashMap内部使用hashCode()方法计算key的哈希值，得到一个int类型数组。这个哈希值是一个整数，用于确定key在桶数组中的位置。</span><br><span class="line">2. 确定key在桶数组中的位置：通过哈希值和桶数组的长度计算 key 在桶数组中的位置，具体的计算方式是：hash &amp; (table.length - 1)，其中，hash 是 key 的哈希值，table.length 是桶数组的长度。</span><br><span class="line">3. 遍历链表或红黑树</span><br><span class="line"></span><br><span class="line">#### HashMap的hash值</span><br><span class="line"></span><br><span class="line">在HashMap中，哈希值（Hash Value）是用来确定键值对在数组中的位置的。HashMap的底层数据结构是一个哈希表（Hash Table），即一个数组，数组中的每个元素都是一个Entry对象，每个Entry对象包含一个key、一个value和一个指向下一个Entry的指针。当一个键值对被添加到HashMap中时，它首先会根据键的哈希值来确定在数组中的位置，然后将键值对添加到该位置上的Entry对象中。</span><br><span class="line"></span><br><span class="line">#### HashMap初始容量大小是多少?</span><br><span class="line"></span><br><span class="line">默认初始容量大小为16，HashMap 内部会创建一个大小为 16 的桶数组用于存储键值对。</span><br><span class="line"></span><br><span class="line">#### HashMap为什么每次扩容为2的幂次方?</span><br><span class="line"></span><br><span class="line">为了提高散列数据在数组中分布的均匀性。这样可以减少哈希碰撞，提高查找性能。</span><br><span class="line"></span><br><span class="line">HashMap每次扩容为2的幂次方是为了保证在进行哈希值映射到桶的索引计算时，只需要使用位运算，即h&amp;(n-1)，n为数组长度，这样可以提高计算效率，避免哈希冲突，使得添加的元素均匀分布在HashMap的每个位置上。</span><br><span class="line"></span><br><span class="line">#### HashMap底层为什么是线程不安全的</span><br><span class="line"></span><br><span class="line">1. 在JDK1.7中，当[并发](https://so.csdn.net/so/search?q=并发&amp;spm=1001.2101.3001.7020)执行扩容操作时会造成环形链和数据丢失的情况。</span><br><span class="line"></span><br><span class="line">2. 在JDK1.8中，在并发执行put操作时会发生数据覆盖的情况。</span><br><span class="line">3. 当多个线程同时对 HashMap 进行插入、删除或查询操作时，可能会出现两个或多个线程同时对同一个桶（bucket）进行操作的情况，导致数据不一致或数据丢失等问题。</span><br><span class="line"></span><br><span class="line">#### HashMap的初始化的底层实现</span><br><span class="line"></span><br><span class="line">HashMap的初始化主要包括创建一个空的哈希表数组，设置负载因子和阈值。默认加载因子为0.75，初始容量为16.</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">// HashMap 的构造方法</span><br><span class="line">public HashMap() &#123;</span><br><span class="line">    this.loadFactor = DEFAULT_LOAD_FACTOR; // 设置默认负载因子为 0.75</span><br><span class="line">    this.threshold = tableSizeFor(DEFAULT_INITIAL_CAPACITY); // 计算默认阈值</span><br><span class="line">&#125;//其中，DEFAULT_INITIAL_CAPACITY 的值为 16，是桶数组的默认大小。tableSizeFor() 方法用于计算大于等于给定值的最小的 2 的幂次方，这个值也就是桶数组的大小。例如，当给定值为 20 时，它会返回 32。</span><br></pre></td></tr></table></figure></code></pre></li></ul><h4 id="HashMap的put过程，HashMap的kye可以传空"><a href="#HashMap的put过程，HashMap的kye可以传空" class="headerlink" title="HashMap的put过程，HashMap的kye可以传空"></a>HashMap的put过程，HashMap的kye可以传空</h4><p>HashMap的put()方法的底层实现是通过哈希算法来计算元素在数组中的位置，然后将元素插入到该位置上。</p><ul><li><p>首先判断数组是否为空，如果为空，则调用resize()方法进行扩容。</p></li><li><p>根据元素的哈希值计算出元素在数组中的位置</p></li><li><p>如果该位置为空，则将元素插入到该位置上。</p></li><li><p>如果该位置已经存在元素，则需要进行判断：</p><ul><li>如果该元素的键已经存在，则直接替换该键对应的值。</li><li>如果该元素的键不存在，则需要将该元素插入到链表或红黑树中。</li></ul></li><li><p>如果插入元素后，元素数量超过了数组长度的 75%，则调用 resize() 方法进行扩容。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HashMap 的 put() 方法</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// putVal()方法，实现put()方法的核心逻辑</span></span><br><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key,V value, <span class="type">boolean</span> onlyIfAbsent, <span class="type">boolean</span> evict)</span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; <span class="comment">// 声明数组变量</span></span><br><span class="line">    Node&lt;K,V&gt; p; <span class="comment">// 声明节点变量</span></span><br><span class="line">    <span class="type">int</span> n, i; <span class="comment">// n 为数组长度，i 为桶位置</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>) &#123; <span class="comment">// 判断数组是否为空</span></span><br><span class="line">        n = (tab = resize()).length; <span class="comment">// 调用 resize() 方法进行扩容</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>) &#123; <span class="comment">// 判断桶中是否已有元素</span></span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="literal">null</span>); <span class="comment">// 桶为空，直接添加元素</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k)))) &#123; <span class="comment">// 判断键是否已经存在</span></span><br><span class="line">            e = p;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode) &#123; <span class="comment">// 如果是红黑树节点，则按照红黑树的方式添加元素</span></span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果是链表节点，则按照链表的方式添加元素</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= <span class="number">7</span>) <span class="comment">// 如果链表长度达到 8，则转换为红黑树</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123; <span class="comment">// 如果键已经存在，直接替换值</span></span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (++size &gt; <span class="number">12</span> * tab.length / <span class="number">16</span>) <span class="comment">// 判断是否需要扩容</span></span><br><span class="line">        resize();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// resize() 方法，用于进行扩容操作</span></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCap</span> <span class="operator">=</span> (oldTab == <span class="literal">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">newCap</span> <span class="operator">=</span> (oldCap == <span class="number">0</span>) ? <span class="number">16</span> : oldCap * <span class="number">2</span>; <span class="comment">// 将容量扩大一倍</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="literal">null</span>) &#123; <span class="comment">// 将旧数组中的元素重新散列到新数组中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="literal">null</span>) &#123;</span><br><span class="line">                oldTab[j] = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="literal">null</span>) <span class="comment">// 如果只有一个元素，则直接计算新的桶位置</span></span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode) <span class="comment">// 如果是红黑树节点，则按照红黑树的方式重新散列</span></span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="built_in">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// 如果是链表节点，则按照链表的方式重新散列</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="literal">null</span>, loTail = <span class="literal">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="literal">null</span>, hiTail = <span class="literal">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="literal">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="literal">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="literal">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="literal">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="集合之间的区别"><a href="#集合之间的区别" class="headerlink" title="集合之间的区别"></a>集合之间的区别</h4><p>ArrayList和LinkedList，Vector都是List的实现类，它们的主要区别在于：ArrayList是基于动态数组实现的，支持随机访问；而LinkedList是基于链表实现的，支持快速插入和删除。</p><p>Vector和ArrayList区别<br>Vector提供synchronized修饰方法，是线程安全版本的ArrayList</p><p>HashSet和TreeSet都是Set的实现类，它们的主要区别在于：HashSet是基于哈希表实现的，不保证元素顺序；而TreeSet是基于红黑树实现的，可以对元素进行排序。</p><p>HashMap和TreeMap，LinkHashMap都是Map的实现类，它们的主要区别在于：HashMap是基于哈希表实现的，不保证元素顺序；而TreeMap是基于红黑树实现的，可以对键进行排序。</p><h4 id="数组和链表区别，优缺点"><a href="#数组和链表区别，优缺点" class="headerlink" title="数组和链表区别，优缺点"></a>数组和链表区别，优缺点</h4><ul><li>存储方式：数组是一块连续的内存空间，而链表是由多个节点通过指针链接起来的数据结构。</li><li>插入和删除操作：在数组中，插入和删除操作需要移动后面的元素以保持连续性，时间复杂度为 O(n)；而在链表中，插入和删除操作只需要修改指针，时间复杂度为 O(1)。</li><li>随机访问：由于数组在内存中是连续的，因此可以通过下标快速随机访问，时间复杂度为 O(1)；而链表中的节点不一定连续，因此需要遍历链表才能访问特定位置的元素，时间复杂度为 O(n)。</li><li>空间利用率：由于数组是一块连续的内存空间，因此需要一次性分配足够的内存空间，如果数组长度不确定，可能会浪费内存；而链表可以动态地分配内存，只需要在需要时分配节点，因此可以更好地利用内存。</li></ul><h4 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h4><ul><li>在concurrentHashMap中大量的利用了volatile，final，CAS等lock-free技术来减少锁竞争对于性能的影响</li><li>JDK1.7版本的ConCurrentHashMap的实现原理<ul><li>采用HashEntry数组+Segment（分段锁）的方式实现</li><li>Segment：继承ReentrantLock，将整个哈希表分成多个段，每个段都是一个独立的哈希表可以独立地进行插入，删除和查询等操作。每个段都有自己的锁，多个线程可以同时对不同的段进行操作，从而提高并发性能。</li><li>Segment的实现采用了volatile关键字（保证可见性）和CAS操作（保证原子性）</li><li>ConCurrentHashMap定位一个元素的过程需要进行两次Hash操作。第一次定位到Segment，第二次定位到元素所在的链表的头部。</li></ul></li><li>JDK1.8版本的ConCurrentHashMap采用Node节点数组+链表+红黑树来实现<ul><li>在 Java 8 中，ConcurrentHashMap 的实现采用了一种全新的方式，使用了一种基于链表和红黑树混合的数据结构，并采用了 CAS 操作来保证线程安全和高效性，取消了早期版本中的 Segment 概念。在新的实现中，ConcurrentHashMap 将整个哈希表分为多个桶（bucket），每个桶下面可以有多个键值对，每个键值对称为一个 Node。每个桶都有一个独立的锁，可以独立地进行插入、删除和查询等操作，从而提高了并发性能。</li><li>Node：保存key，value及key的hash值的数据结构。其中value和next都用volatile修饰，保证并发的可见性。</li></ul></li><li>1.7和1.8的区别：<ul><li>数据结构：取消了Segment分段锁的数据结构，取而代之的是数组+链表+红黑树的结构。</li><li>保证线程安全机制：JDK1.7采用segment的分段锁机制实现线程安全，其中segment继承自ReentrantLock。JDK1.8采用CAS+Synchronized保证线程安全。</li><li>锁的粒度：原来是对需要进行数据操作的Segment加锁，现调整为对每个数组元素加锁（Node）。</li><li>链表转化为红黑树:定位结点的hash算法简化会带来弊端,Hash冲突加剧,因此在链表节点数量大于8时，会将链表转化为红黑树进行存储。</li><li>查询时间复杂度：从原来的遍历链表O(n)，变成遍历红黑树O(logN)。</li></ul></li></ul><hr><h4 id="B-树的特点"><a href="#B-树的特点" class="headerlink" title="B+树的特点"></a>B+树的特点</h4><ul><li>非叶子节点存储key，叶子节点存储key和数据</li><li>每个节点存储多个key</li><li>B+树的叶子节点都是按照顺序链接的，可以方便地进行范围查询和排序操作。</li><li>B+树的每个节点都有相同的高度</li><li>B+树的每个叶子节点都包含了指向下一个叶子节点的指针，可以支持顺序访问。</li></ul><p>​<img src="https://i.postimg.cc/j5z2N9vm/B-tree.png"></p><h4 id="通常一颗B-树可以存放多少行数据"><a href="#通常一颗B-树可以存放多少行数据" class="headerlink" title="通常一颗B+树可以存放多少行数据"></a><strong>通常一颗B+树可以存放多少行数据</strong></h4><p>先假设B+树的高度为2，即存在一个根节点和若干个叶子节点，那么这棵B+树的存放总记录数为：根节点指针数*单个叶子节点记录行数。</p><p>上面我们已经说了单个叶子节点（页）中的记录数是 16K（默认一页16KB）&#x2F;1K（假设一行数据1KB）&#x3D;16条数据（这里假设一行记录的数据大小为1KB）</p><p>那么我们再计算非叶子结点能存放多少指针？</p><p>假设主键是bigint类型，长度为8字节，而指针大小在innoDB源码中设置为6字节，这样一共14字节，我们一个页中能放多少这样的单元，其实就代表有多少指针，即16KB（16<em>1024&#x3D;16384B）&#x2F;14B &#x3D;1170（索引个数），那么可以算出一棵高度为2的B+树，能存放1170</em> 16 &#x3D; 18720条这样的数据记录。</p><p>同理，高度为3的B+树可以存放：1170（索引个数） <em>1170（索引个数）</em> 16（叶子节点数据记录数） &#x3D; 21902400（2千万）条这样的记录。</p><p><strong>所以在InnoDB中B+树高度一般为1~3层</strong>，它就能满足千万级的数据存储。在查找数据时一次页的查找代表一次IO，所以通过主键索引查询通常只需要1~3次IO操作即可查找到数据。</p><h4 id="MySQL索引为什么要用B-树，为啥不用红黑树"><a href="#MySQL索引为什么要用B-树，为啥不用红黑树" class="headerlink" title="MySQL索引为什么要用B+树，为啥不用红黑树"></a>MySQL索引为什么要用B+树，为啥不用红黑树</h4><ul><li>B+树的每个节点可以存储多个关键字和数据指针，并在磁盘上存储连续的节点，可以减少磁盘IO操作的次数；而红黑树的每个节点只包含一个子节点，需要经常进行磁盘IO操作。</li><li>B+树的叶子节点都是按照顺序链接的，可以方便地进行范围查询和排序操作，而红黑树的节点之间没有特定的关系。</li></ul><h4 id="除了B-树还了解什么树，他们之间的区别？"><a href="#除了B-树还了解什么树，他们之间的区别？" class="headerlink" title="除了B+树还了解什么树，他们之间的区别？"></a>除了B+树还了解什么树，他们之间的区别？</h4><ol><li><p>二叉查找树：</p><ul><li><p>左子树上所有节点的值均小于或等于它的根节点的值</p></li><li><p>右子树上所有节点的值均大于或等于它的根节点的值</p></li><li><p>左、右子树也分别为二叉排序树</p></li></ul><p><img src="https://i.postimg.cc/4d1TCWXY/image.jpg" alt="二叉查找树"></p></li><li><p>红黑树：</p><ul><li><p>节点是红色或黑色</p></li><li><p>根节点是黑色</p></li><li><p>每个叶子节点都是黑色的空节点（NULL节点）</p></li><li><p>每个红色节点的两个子节点都是黑色（从每个叶子到跟的所有路径上不能有两个连续的红色节点）</p></li><li><p>从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点</p></li><li><p>红黑树的查询、插入和删除操作的时间复杂度都为O(log n)</p><p><img src="https://i.postimg.cc/2Sd6bntS/image.jpg" alt="红黑树"></p></li></ul></li></ol><p>​<a href="https://github.com/xp-study/LeetCode/blob/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/%E7%BA%A2%E9%BB%91%E6%A0%91.md">红黑树左旋右旋以及变色详解</a></p><ol start="3"><li><p>平衡二叉树：</p><ul><li>左右两个子树的高度差的绝对值不超过1</li><li>左右两个子树都是一颗平衡二叉树</li><li>把插入，查找，删除的时间复杂度最好情况和最坏情况都维持在O(logN)</li></ul></li><li><p>Hash索引：</p><p>哈希索引（Hash Index）是一种基于哈希表实现的索引结构，它将数据的关键字通过哈希函数计算得到一个哈希值，并将这个哈希值作为索引存储到哈希表中</p></li><li><p>B树</p><p>​<img src="https://i.postimg.cc/gjmJKDTJ/BTree.png"></p></li></ol><h4 id="BTree和B-Tree的区别"><a href="#BTree和B-Tree的区别" class="headerlink" title="BTree和B+Tree的区别"></a>BTree和B+Tree的区别</h4><ul><li>B+Tree的内部节点不保存数据，只保存索引信息，所有数据都保存在叶子结点。而BTree中，指针和数据都是存储在一起的，每个节点都存储key和date</li></ul><h4 id="数据库隔离级别，每个都解决了什么问题"><a href="#数据库隔离级别，每个都解决了什么问题" class="headerlink" title="数据库隔离级别，每个都解决了什么问题"></a>数据库隔离级别，每个都解决了什么问题</h4><ul><li>读未提交（Read uncommitted）最低的隔离级别，允许一个事务读取到另一个事务尚未提交的数据。什么都没有解决。</li><li>读已提交（Read committed)  允许一个事务读取到另一个事务已经提交的数据。可避免脏读。</li><li>可重复读（Repeated read)  在一个事务中，同一次查询语句多次执行的结果是一致的。解决了脏读和不可重复读；在MySQL中使用MVCC解决了幻读。MySQL的默认隔离级别</li><li>可串行化（Serializable）最高的隔离级别，强制事务串行执行，避免脏读、不可重复读和幻读问题，但是会影响数据库的并发性能。</li></ul><h4 id="脏读和不可重复读的区别"><a href="#脏读和不可重复读的区别" class="headerlink" title="脏读和不可重复读的区别"></a>脏读和不可重复读的区别</h4><ul><li>脏读：一个事务未提交前，另一个事务就可以读取该事务修改的数据</li><li>不可重复读：一个事务多次查询返回不同的数据值，这是由于在查询的隔离期间，另一个事务修改并提交了数据</li><li>区别：脏读是读取到未提交的数据；不可重复读是读取到前一个事务提交的数据</li><li>幻读：在一个事务中读取到别的事务插入的数据，导致前后不一致</li></ul><h4 id="MySQL的存储引擎："><a href="#MySQL的存储引擎：" class="headerlink" title="MySQL的存储引擎："></a>MySQL的存储引擎：</h4><ul><li>InnoDB：InnoDB是MySQL的默认存储引擎，它支持事务、行级锁、外键等高级特性，适用于大型数据库和高并发环境。在5.5版本之后默认是InnoDB，</li><li>MyISAM： MyISAM是MySQL的另一个常用存储引擎，它不支持事务和行级锁，但具有较快的查询速度和较小的存储需求。在5.5版本之前默认是MyISAM，</li></ul><h4 id="MyISAM-和InnoDB的区别："><a href="#MyISAM-和InnoDB的区别：" class="headerlink" title="MyISAM 和InnoDB的区别："></a>MyISAM 和InnoDB的区别：</h4><ul><li>MyISAM 不支持事务 ，外键； InnoDB 支持事务 ，外键</li><li>MyISAM使用的是表级锁 ； InnoDB既能使用表级锁，又能使用行级锁；一般使用行级锁</li><li>InnoDB可以使用MVCC来</li><li>MyISAM是非聚集索引，InnoDB是聚集索引（非聚集索引：索引文件和数据文件是分开的）</li></ul><h4 id="MySQL-InnoDB下的当前读和快照读"><a href="#MySQL-InnoDB下的当前读和快照读" class="headerlink" title="MySQL InnoDB下的当前读和快照读"></a>MySQL InnoDB下的当前读和快照读</h4><ul><li><p>当前读</p><p>像select lock in share mode（共享锁），select for update；update；insert；delete（排他锁）这些操作都是一种当前读，它读取的是记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁</p></li><li><p>快照读</p></li></ul><p>​用于在读取数据时不会对数据进行加锁，而是读取一个时间点的数据快照，以避免其他事务对该数据进行修改。快照读可以提高读取性能，并且不会对其他事务的写操作造成影响。</p><h4 id="能说一下MVCC是如何实现的吗？"><a href="#能说一下MVCC是如何实现的吗？" class="headerlink" title="能说一下MVCC是如何实现的吗？"></a>能说一下MVCC是如何实现的吗？</h4><ul><li><p>MVCC的实现原理主要是依赖记录中的3个隐式字段，undo日志，ReadView来实现的。</p></li><li><p>MVCC的实现方法是基于在每个数据对象（如表、行、列）上维护多个版本，每个版本都有一个时间戳，表示它的创建时间，在读取数据时，事务只能读取早于其启动时间戳的版本。这样，每个事务都可以读取自己的版本，而不会读取其他事务正在修改的版本。</p></li><li><p>也就是为事务分配单向增长的时间戳，为每个修改保存一个版本，版本与事务时间戳关联，读操作只读该事务开始前的数据库的快照。 这样在读操作时就不用阻塞写操作，写操作也不用阻塞读操作；不仅可以提高并发性能，还可以解决脏读，幻读，不可重复读等事务问题。更新丢失问题除外</p></li></ul><h4 id="Mysql事务是怎么实现的？"><a href="#Mysql事务是怎么实现的？" class="headerlink" title="Mysql事务是怎么实现的？"></a>Mysql事务是怎么实现的？</h4><p>MySQL中的事务是通过ACID（原子性，一致性，隔离性，持久性）属性来实现的，它保证了多个操作在一起执行时的一致性和完整性。</p><ul><li><p>原子性：事务包含的所有操作要么全部成功，要么全部失败回滚</p></li><li><p>一致性：事物提交前和提交后, 数据都是合法的一致性状态, 即使发生异常也不会破坏数据库的完整性约束.</p></li><li><p>隔离性：并发执行的事务是隔离的，不会相互影响，保证并发处理数据的正确性</p></li><li><p>持久性：一个事物一旦被提交, 它对数据库的改变就是永久的,</p></li></ul><h4 id="MyBatis用到了哪些Java的机制"><a href="#MyBatis用到了哪些Java的机制" class="headerlink" title="MyBatis用到了哪些Java的机制"></a>MyBatis用到了哪些Java的机制</h4><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><ul><li>定义：索引是存储引擎用于提高数据库表的访问速度的一种数据结构</li><li>优点：<ul><li>加快数据查找的速度</li><li>为用来排序或者是分组的字段添加索引，可以加快分组和排序的速度</li><li>加快表与表之间的连接</li></ul></li><li>缺点：<ul><li>建立索引需要<strong>占用物理空间</strong></li><li>会降低表的增删改的效率，因为每次对表记录进行增删改，需要进行<strong>动态维护索引</strong>，导致增删改时间变长</li></ul></li></ul><h4 id="什么情况下需要建立索引"><a href="#什么情况下需要建立索引" class="headerlink" title="什么情况下需要建立索引"></a>什么情况下需要建立索引</h4><ol><li>经常用于查询的字段</li><li>经常用于连接的字段</li><li>经常需要排序的字段</li></ol><h4 id="什么情况下不建立索引"><a href="#什么情况下不建立索引" class="headerlink" title="什么情况下不建立索引"></a>什么情况下不建立索引</h4><ol><li><code>where</code>条件中用不到的字段不适合建立索引</li><li>表记录较少。比如只有几百条数据，没必要加索引。</li><li>需要经常增删改。需要评估是否适合加索引</li><li><strong>参与列计算</strong>的列不适合建索引</li><li><strong>区分度不高</strong>的字段不适合建立索引，如性别，只有男&#x2F;女&#x2F;未知三个值。加了索引，查询效率也不会提高。</li></ol><h4 id="索引在什么时候会失效"><a href="#索引在什么时候会失效" class="headerlink" title="索引在什么时候会失效"></a>索引在什么时候会失效</h4><ul><li>以%开头的like查询如%abc，无法使用索引</li><li>查询条件中列类型是字符串，没有使用引号，</li><li>对索引列进行运算</li><li>在WHERE中使用OR时，有一个列没有索引，那么其它列的索引将不起作用</li><li>where语句中使用了IS NULL或者IS NOT NULL，会造成索引失效</li></ul><h4 id="数据库建立索引有什么原则"><a href="#数据库建立索引有什么原则" class="headerlink" title="数据库建立索引有什么原则"></a>数据库建立索引有什么原则</h4><h4 id="常见索引类型"><a href="#常见索引类型" class="headerlink" title="常见索引类型"></a>常见索引类型</h4><ul><li>主键索引：设定为逐主键后数据库会自动建立索引，在innoDB中为聚簇索引</li><li>单列索引：一个索引只包含单个列，一个表中可以有多个单列索引</li><li>唯一索引：索引列的值必须唯一，但允许有空值</li><li>复合索引：一个索引包含多个列，在数据库操作期间，复合索引比单值索引所需要的开销更小（对于相同的多个列建索引）</li><li>覆盖索引：它包含了所有查询所需的列，可以直接满足查询的需求，从而避免了回表操作。当使用覆盖索引时，查询可以直接在索引中完成，而不需要再去访问数据表，从而大大提高了查询的性能。</li></ul><h4 id="聚集索引和非聚集索引"><a href="#聚集索引和非聚集索引" class="headerlink" title="聚集索引和非聚集索引"></a>聚集索引和非聚集索引</h4><ul><li>聚集索引：指索引项的排序方式和表中数据记录排序方式一致的索引。它会根据聚集索引键的顺序来存储表中的数据，即对表的数据按索引键的顺序进行排序，然后重新存储到磁盘上，一个表只能有一个聚集索引</li><li>非聚集索引：索引顺序与物理存储顺序不一致；</li></ul><h4 id="聚簇索引和非聚簇索引的区别"><a href="#聚簇索引和非聚簇索引的区别" class="headerlink" title="聚簇索引和非聚簇索引的区别"></a>聚簇索引和非聚簇索引的区别</h4><p> 索引文件和数据文件分开存储，存储在一起</p><h4 id="为什么InnoDB中使用自增主键"><a href="#为什么InnoDB中使用自增主键" class="headerlink" title="为什么InnoDB中使用自增主键"></a>为什么InnoDB中使用自增主键</h4><p>在InnoDB中使用回自增主键可以避免回表，提高查询效率，同时还可以保证插入数据的顺序性</p><h4 id="怎么避免回表？什么是索引下推？"><a href="#怎么避免回表？什么是索引下推？" class="headerlink" title="怎么避免回表？什么是索引下推？"></a>怎么避免回表？什么是索引下推？</h4><p>避免回表的方式包含使用覆盖索引，使用联合索引等。</p><p>索引下推：将where子句中的条件下推到存储引擎层进行过滤，减少回表次数。</p><h4 id="悲观锁和乐观锁"><a href="#悲观锁和乐观锁" class="headerlink" title="悲观锁和乐观锁"></a>悲观锁和乐观锁</h4><p><strong>悲观锁和乐观锁是一种锁的设计思想，不是具体的锁</strong></p><ul><li><span style="color:red">数据库中的悲观锁可以解决读-写冲突和写-写冲突，指在用加锁的方式去解决</span></li><li><span style="color:red">数据库中的乐观锁要解决的事数据库并发场景下的写-写冲突，指在用无锁的方式去解决</span></li></ul><h4 id="怎么在MySQL中实现乐观锁"><a href="#怎么在MySQL中实现乐观锁" class="headerlink" title="怎么在MySQL中实现乐观锁"></a>怎么在MySQL中实现乐观锁</h4><ol><li><p>使用数据版本（version）实现</p><ul><li>就是在表中增添一个字段作为该记录的版本标识version，每次对该记录的写操作都会让version+1</li><li>所以当我们读取了数据（包括version），做出更新，要提交的时候就会拿取得的version去跟数据库中version比较是否一致，如果一致则代表这个时间段，并没有其他的线程也修改过这个数据，给予更新，同时version+1；如果不一致，则代表在这个时间段，该记录已经被其他线程修改过了，认为是过期数据，返回冲突信息，让用户决定下一步动作。</li><li>update table set num &#x3D; num +1 ,version &#x3D; version + 1 where version &#x3D; #{version} and id &#x3D; #{id}</li></ul></li><li><p>使用时间戳（timestamp）实现</p><ul><li>表中增加一个字段，名称无所谓，比如叫update_time ，字段类型使用时间戳（timestamp）</li><li>原理和方式一致，也是在更新提交时检查当前数据库中数据的时间戳和自己更新当前取到的时间戳是否一致，如果一致则代表没有冲突，则提交更新，同时将时间戳更新为当前时间，否则就是该时间段有其他线程也更新提交过，返回冲突信息，等待用户下一步动作。</li><li>update table set num &#x3D; num+1，update_time &#x3D; unix_timestamp(new()) where id &#x3D; #{id} and update_time &#x3D; #{updateTime}</li></ul></li></ol><h4 id="怎么在代码中实现悲观锁，举个实际场景的例子"><a href="#怎么在代码中实现悲观锁，举个实际场景的例子" class="headerlink" title="怎么在代码中实现悲观锁，举个实际场景的例子"></a>怎么在代码中实现悲观锁，举个实际场景的例子</h4><h4 id="悲观锁和乐观锁分别适用于哪些场景"><a href="#悲观锁和乐观锁分别适用于哪些场景" class="headerlink" title="悲观锁和乐观锁分别适用于哪些场景"></a>悲观锁和乐观锁分别适用于哪些场景</h4><ul><li>并发情况很严重：悲观锁</li><li>要求响应速度:乐观锁</li></ul><h4 id="悲观锁和乐观锁的优缺点"><a href="#悲观锁和乐观锁的优缺点" class="headerlink" title="悲观锁和乐观锁的优缺点"></a>悲观锁和乐观锁的优缺点</h4><ul><li>悲观锁<ul><li>优点：适合在写多读少的并发环境中使用，</li><li>缺点：加锁会增加系统开销，虽然能保证数据的安全，但数据处理吞吐量低，不适合在读书写少的场合下使用</li></ul></li><li>乐观锁<ul><li>优点：在读多写少的并发场景下，可以避免数据库加锁的开销，提高Dao层的响应性能</li><li>缺点：导致开销比悲观锁更高</li></ul></li></ul><h4 id="知不知道mybatis中-和-区别？"><a href="#知不知道mybatis中-和-区别？" class="headerlink" title="知不知道mybatis中$和#区别？"></a>知不知道mybatis中$和#区别？</h4><ul><li>#{…}：使用占位符，Mybatis会将参数值预处理，对SQL注入有安全保障</li><li>#{…}：直接将参数值拼接到SQL语句中，可能存在SQL注入风险</li></ul><h4 id="为什么like-放前面会失效"><a href="#为什么like-放前面会失效" class="headerlink" title="为什么like%放前面会失效"></a>为什么like%放前面会失效</h4><p>当在like操作中将通配符%放在前面时，会导致数据库无法使用索引进行查询优化，从而降级查询性能。</p><h4 id="如何优化慢查询语句"><a href="#如何优化慢查询语句" class="headerlink" title="如何优化慢查询语句"></a>如何优化慢查询语句</h4><ul><li>添加合适的索引</li><li>优化WHERE子句和JOIN条件</li><li>使用EXPLAIN分析查询计划</li><li>分页查询</li><li>使用缓存</li></ul><h4 id=""><a href="#" class="headerlink" title=""></a></h4><hr><h4 id="类加载的过程？"><a href="#类加载的过程？" class="headerlink" title="类加载的过程？"></a>类加载的过程？</h4><p>加载 –&gt;  连接（验证，准备，解析）–&gt; 初始化</p><ul><li>加载：<ul><li>通过全类名获取定义此类的二进制字节流</li><li>将字节流所代表的静态存储结构转换为方法区运行时数据结构</li><li>在内存中生成一个代表类的Class对象，作为方法区这些数据的访问入口</li></ul></li><li>连接：<ul><li>验证：验证类是否符合Java规范和JVM规范</li><li>准备：为类的静态变量分配内存，初始化为系统的初始值</li><li>解析：将符号引用转为直接引用的过程</li></ul></li><li>初始化：它是对类的静态变量进行初始化的过程。在初始化阶段，会执行类的静态代码块，并初始化静态变量</li></ul><h4 id="JVM的垃圾回收算法-哪些会产生垃圾碎片"><a href="#JVM的垃圾回收算法-哪些会产生垃圾碎片" class="headerlink" title="JVM的垃圾回收算法,哪些会产生垃圾碎片?"></a>JVM的垃圾回收算法,哪些会产生垃圾碎片?</h4><p><strong>标记清除和标记整理算法可能会产生垃圾碎片</strong></p><ul><li>标记清除：垃圾回收器汇首先会标记所有需要回收的对象，然后清除未标记的对象。这个过程会产生大量不连续的内存空间，即垃圾碎片</li><li>标记整理算法：垃圾收集器会首先标记所有要回收的对象，然后将所有存活的对象都向一端移动，然后清理掉端边界以外的内存空间。</li><li>复制算法：将内存分为两块，每次使用其中一块，垃圾回收时，将正在使用的那块内存中存活的内存放入另一块内存中，然后清空原内存块</li><li>分代算法：该算法将内存按照对象的年龄分为多个代，每个代使用不同的垃圾回收算法，例如新生代使用复制算法，老年代使用标记-整理算法等。分代算法可以针对不同的对象进行不同的垃圾回收策略，从而提高垃圾回收的效率。</li></ul><h4 id="能说说有哪些垃圾回收器吗？"><a href="#能说说有哪些垃圾回收器吗？" class="headerlink" title="能说说有哪些垃圾回收器吗？"></a>能说说有哪些垃圾回收器吗？</h4><p>Serial</p><p>Serial Old</p><p>Parallel New</p><p>parallel old</p><p>parallel Scaverage</p><p>CMS</p><p>G1</p><h4 id="什么时候触发垃圾回收，垃圾回收的主要区域"><a href="#什么时候触发垃圾回收，垃圾回收的主要区域" class="headerlink" title="什么时候触发垃圾回收，垃圾回收的主要区域"></a>什么时候触发垃圾回收，垃圾回收的主要区域</h4><p><strong>当eden区满了会触发垃圾回收</strong>，用minorGC清除（复制算法）</p><p>主要区域：发生在堆中</p><h4 id="JVM-为什么要分代"><a href="#JVM-为什么要分代" class="headerlink" title="JVM 为什么要分代"></a>JVM 为什么要分代</h4><p>因为不同类型的对象具有不同的生命周期和访问模式，因此采用不同的垃圾回收算法可以提高垃圾回收的效率和性能</p><p>分为新生代和老年代：</p><ul><li>新生代主要存放新创建的对象，内存大小相对会比较小，垃圾回收会比较频繁</li><li>老年代主要存放JVM认为生命周期比较长的对象，内存大小相对较大，垃圾回收没有那么频繁。</li></ul><h4 id="堆OutOfMemory和栈OutOfMemory有什么区别？如何解决？"><a href="#堆OutOfMemory和栈OutOfMemory有什么区别？如何解决？" class="headerlink" title="堆OutOfMemory和栈OutOfMemory有什么区别？如何解决？"></a>堆OutOfMemory和栈OutOfMemory有什么区别？如何解决？</h4><ul><li>堆OutOfMemory：通常发生在Java堆空间不足或者无法分配大对象是。可以通过使用 -Xmx参数来设置Java堆的最大大小</li><li>栈OutOfMemory：通常发生在线程过多或者线程调用的方法深度过大时。通过 -Xss参数来设置每个线程的栈大小</li></ul><h4 id="为什么说TCP是可靠传输？"><a href="#为什么说TCP是可靠传输？" class="headerlink" title="为什么说TCP是可靠传输？"></a>为什么说TCP是可靠传输？</h4><p>TCP是一种面向连接的、可靠的传输协议，主要用于在计算机网络中进行数据的可靠传输</p><p>原因：</p><ol><li>序列号和确认应答机制：在TCP中，每个传输的数据包都有一个序列号和一个确认应答机制。发送方将每个数据包都标记上一个序列号，接收方收到的数据包的序列号。如果发送方没有接收到确认应答，就会重发数据包，直到接收方确认接收到数据包为止。</li><li>数据校验和：TCP在每个数据包中都包含一个数据校验和，用于检测数据在传输过程中是否被破坏。如果接收方检测到数据包被损坏，则会要求发送方重新发送该数据包。</li><li>滑动窗口机制：TCP 中引入了滑动窗口机制，用于控制发送方和接收方之间的数据传输速率。发送方根据接收方发送的确认应答来调整自己的发送速率，以避免发送过快导致网络拥塞和数据丢失。</li><li>连接管理：TCP 中采用了三次握手和四次挥手的连接管理机制，用于确保连接的可靠性和有效性。在建立连接时，发送方会向接收方发送 SYN 报文，接收方收到 SYN 报文后会回复一个 SYN&#x2F;ACK 报文，发送方再回复一个 ACK 报文，完成连接的建立。在关闭连接时，发送方会向接收方发送 FIN 报文，接收方收到 FIN 报文后会回复一个 ACK 报文，然后等待一段时间后再发送一个 FIN 报文，发送方收到 FIN 报文后会回复一个 ACK 报文，完成连接的关闭。</li></ol><h4 id="三次握手为什么不是两次？少几次不行么？（TCP-可以确保连接的可靠性，避免了因为网络延迟或丢包等问题导致连接建立失败的情况。）"><a href="#三次握手为什么不是两次？少几次不行么？（TCP-可以确保连接的可靠性，避免了因为网络延迟或丢包等问题导致连接建立失败的情况。）" class="headerlink" title="三次握手为什么不是两次？少几次不行么？（TCP 可以确保连接的可靠性，避免了因为网络延迟或丢包等问题导致连接建立失败的情况。）"></a>三次握手为什么不是两次？少几次不行么？（TCP 可以确保连接的可靠性，避免了因为网络延迟或丢包等问题导致连接建立失败的情况。）</h4><p>三次握手的过程即是通信双方互相告知序列号起始值，并确认对方已经收到了序列号起始值的必经步骤。</p><p>如果只是两次握手，至多只有连接发起方的其实序列能被确认，另一方选择的序列号则得不到确认。</p><p>不行，因为三次握手是客户端和服务端建立TCP连接的过程：</p><ol><li>客户端向服务器发送 SYN 报文，表示请求建立连接。</li><li>服务器接收到客户端的 SYN 报文后，向客户端发送 SYN+ACK报文，表示同意建立连接。</li><li>客户端接收到服务器的 SYN+ACK 报文后，再次向服务器发送 ACK 报文，表示确认建立连接。</li></ol><p>通过三次握手，双方可以确保彼此都已经准备好建立连接，避免了因为网络延迟或者其他原因导致的连接建立失败或者错误的连接建立。</p><h4 id="tcp连接，为什么握手3次，挥手却需要4次（通过四次挥手，TCP-可以确保数据的完整性，避免了因为网络延迟或丢包等问题导致数据丢失的情况）？"><a href="#tcp连接，为什么握手3次，挥手却需要4次（通过四次挥手，TCP-可以确保数据的完整性，避免了因为网络延迟或丢包等问题导致数据丢失的情况）？" class="headerlink" title="tcp连接，为什么握手3次，挥手却需要4次（通过四次挥手，TCP 可以确保数据的完整性，避免了因为网络延迟或丢包等问题导致数据丢失的情况）？"></a>tcp连接，为什么握手3次，挥手却需要4次（通过四次挥手，TCP 可以确保数据的完整性，避免了因为网络延迟或丢包等问题导致数据丢失的情况）？</h4><p>断开连接需要保证数据的完整性和可靠性</p><p>四次挥手：</p><ol><li>第一次挥手：客户端向服务器端发送一个FIN报文段，表示客户端不再发送数据了，但是仍然可以接收来自服务器端的数据。</li><li>第二次挥手：服务器端收到客户端的FIN报文段后，向客户端发送一个ACK报文段，表示服务器端已经接收到客户端的FIN报文段。</li><li>第三次挥手：服务器端向客户端发送一个FIN报文段，表示服务器端不再发送数据了。</li><li>第四次挥手：客户端收到服务器端的FIN报文段后，向服务器端发送一个ACK报文段，表示客户端已经接收到服务器端的FIN报文段。</li></ol><h4 id="Https验证过程"><a href="#Https验证过程" class="headerlink" title="Https验证过程"></a>Https验证过程</h4><p>通过使用SSL&#x2F;TLS协议对通信进行加密和身份验证</p><ol><li><p>客户端发送连接请求：客户端向服务器发起HTTPS连接请求</p></li><li><p>服务器证书发送：服务器收到请求后，经自己的证书发送给客户端。证书中包含了服务器的公钥和相关信息，用于加密和身份验证。</p></li><li><p>客户端验证服务器证书：客户端收到服务器的证书后，会对其进行验证。验证包含以下几个步骤：</p><ol><li>验证证书的合法性：客户端会检查证书的签名是否有效、证书是否过期等。</li><li>验证证书的可信任性：客户端会查找本地的受信任的根证书颁发机构（CA）列表，比对服务器证书的签发者是否在列表中。</li><li>验证证书的域名匹配：客户端会验证证书中的域名与访问的域名是否一致，防止中间人攻击。</li></ol></li><li><p>客户端生成随机密钥：如果服务器证书验证通过，客户端会生成一个随机的对称密钥，并使用服务器的公钥进行加密，然后将加密后的密钥发送给服务器。</p></li><li><p>密钥交换：服务器收到客户端发送的加密后的随机密钥后。使用自己的私钥进行解密，得到对称密钥。</p></li><li><p>安全通信建立：双方利用交换的对称密钥进行加密和解密，确保数据在传输过程中的安全性和完整性。</p></li></ol><h4 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h4><p>HTTP：超文本传输协议是<a href="https://baike.baidu.com/item/%E4%BA%92%E8%81%94%E7%BD%91">互联网</a>上应用最为广泛的一种<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/328636">网络协议</a>。HTTP协议是以明文方式发送信息的，如果黑客截取了 Web 浏览器和服务器之间的传输报文，就可以直接获得其中的信息。</p><p>HTTP原理：①  客户端的浏览器首先要通过网络与服务器建立连接，该连接是通过 TCP 来完成的，一般 TCP 连接的端口号是80。 建立连接后，客户机发送一个请求给服务器，请求方式的格式为：统一资源标识符（URI）、协议版本号，后边是 MIME 信息包括请求修饰符、客户机信息和许可内容。②  服务器接到请求后，给予相应的响应信息，其格式为一个状态行，包括信息的协议版本号、一个成功或错误的代码，后边是 MIME 信息包括服务器信息、实体信息和可能的内容。</p><h4 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h4><p>HTTPS：是以安全为目标的 HTTP 通道，是 HTTP 的安全版。HTTPS 的安全基础是 SSL。SSL 协议位于 <a href="https://baike.baidu.com/item/TCP/IP%E5%8D%8F%E8%AE%AE">TCP&#x2F;IP 协议</a>与各种应用层协议之间，为<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E9%80%9A%E8%AE%AF">数据通讯</a>提供安全支持。</p><h4 id="http和https的区别："><a href="#http和https的区别：" class="headerlink" title="http和https的区别："></a>http和https的区别：</h4><p>1、HTTPS  协议需要到 CA （Certificate Authority，证书颁发机构）申请证书，一般免费证书较少，因而需要一定费用。(以前的网易官网是http，而网易邮箱是 https 。)</p><p>2、HTTP 是超文本传输协议，信息是明文传输，HTTPS 则是具有安全性的 SSL 加密传输协议。</p><p>3、HTTP 和 HTTPS 使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</p><p>4、HTTP 的连接很简单，是无状态的。HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 HTTP 协议安全。(无状态的意思是其数据包的发送、传输和接收都是相互独立的。无连接的意思是指通信双方都不长久的维持对方的任何信息。)</p><h4 id="TCP和UDP的区别："><a href="#TCP和UDP的区别：" class="headerlink" title="TCP和UDP的区别："></a>TCP和UDP的区别：</h4><ol><li>连接：TCP是一种面向连接的协议，它在数据传输之前需要建立一个连接。而UDP是一种无连接的协议，数据包可以直接发送到目的主机，不需要建立连接。</li><li>可靠性：TCP是一种可靠的协议，它会对数据传输进行确认和重传，以确保数据的可靠性和完整性。而UDP是一种不可靠的协议，它不提供数据传输的确认和重传机制，数据包可能会丢失或乱序。</li><li>速度：UDP比TCP更快，因为它没有建立连接和确认重传机制的开销。但是，UDP的快速性也导致了数据传输的不稳定性。</li><li>应用场景：TCP适用于要求数据传输可靠的应用，如电子邮件、文件传输、网页浏览等。而UDP适用于实时数据传输，如音频、视频、游戏等，因为它可以更快地传输数据，但丢失一些数据包并不会对应用造成太大影响。</li></ol><h4 id="运行时数据区有哪些组成？能分别说说他们的作用吗？"><a href="#运行时数据区有哪些组成？能分别说说他们的作用吗？" class="headerlink" title="运行时数据区有哪些组成？能分别说说他们的作用吗？"></a>运行时数据区有哪些组成？能分别说说他们的作用吗？</h4><ul><li>虚拟机栈：存储方法执行过程中的局部变量、操作数栈、动态链接、方法出口等（线程私有）</li><li>本地方法栈：存储本地方法的信息（线程私有）</li><li>程序计数器：记录当前线程正在执行的字节码指令的地址或索引（线程私有）</li><li>堆：存储对象实例和数组，线程共享</li><li>方法区：存储类的信息、常量、静态变量、即时编译器编译后的代码等数据</li><li>运行时常量池：编译期间生成的各种字面量和符号引用，方法区的一部分</li></ul><h4 id="什么是双亲委派机制？怎么破坏双亲委派机制？"><a href="#什么是双亲委派机制？怎么破坏双亲委派机制？" class="headerlink" title="什么是双亲委派机制？怎么破坏双亲委派机制？"></a>什么是双亲委派机制？怎么破坏双亲委派机制？</h4><ul><li><p>定义：java在加载类时默认采用的是双亲委派机制，在每个特定的类加载器在接收到加载类的请求时，首先将加载任务委托给父类加载器，依次递归，如果父类加载器可以完成加载任务，就成功返回；只有付类加载器无法完成此加载任务时，才自己去加载；</p></li><li><p>破坏双亲委派机制：</p><ul><li>自定义加载器</li><li>系统属性设置：可以通过设置系统属性来破坏。eg：Djava.system.class.loader”，可以指定一个特定的类加载器来加载类，从而破坏双亲委派机制。</li><li>Thread Context ClassLoader机制：可以通过Thread Context ClassLoader机制来破坏双亲委派机制。Thread Context ClassLoader机制可以让线程在运行时动态地指定类加载器，从而实现独立的类加载环境</li></ul></li></ul><h4 id="谈谈你对session的理解？如何保证session一致性？"><a href="#谈谈你对session的理解？如何保证session一致性？" class="headerlink" title="谈谈你对session的理解？如何保证session一致性？"></a>谈谈你对session的理解？如何保证session一致性？</h4><h4 id="Minor-Gc-和-Full-GC-有什么不同呢？什么情况下可能发生Full-GC"><a href="#Minor-Gc-和-Full-GC-有什么不同呢？什么情况下可能发生Full-GC" class="headerlink" title="Minor Gc 和 Full GC 有什么不同呢？什么情况下可能发生Full GC?"></a>Minor Gc 和 Full GC 有什么不同呢？什么情况下可能发生Full GC?</h4><p>Minor GC: 清理年轻代（Eden区和Survivor区）的垃圾收集，发生频率较高。当年轻代空间不足时，会触发Minor GC。</p><p>Full GC: 清理整个堆空间（包括年轻代和老年代）的垃圾收集，发生频率较低。Full GC会导致较长时间的暂停。可能发生Full GC的情况：</p><ul><li>老年代空间不足</li><li>System.gc()被显式调用</li><li>CMS或G1收集器在并发收集失败时</li></ul><h4 id="线程和进程的区别是什么？实现多线程的方式有哪几种？"><a href="#线程和进程的区别是什么？实现多线程的方式有哪几种？" class="headerlink" title="线程和进程的区别是什么？实现多线程的方式有哪几种？"></a>线程和进程的区别是什么？实现多线程的方式有哪几种？</h4><ul><li>进程：操作系统分配资源的基本单位，具有独立的内存空间和系统资源</li><li>线程：进程内的一个执行单元，共享进程的内存空间和资源</li><li>方式：<ul><li>继承java.lang.Thread类并重写run()方法</li><li>实现java.lang.Runnable接口并实现run()方法</li><li>实现Callable接口</li></ul></li></ul><h4 id="计算机网络中输入一个url的全过程是怎样的？"><a href="#计算机网络中输入一个url的全过程是怎样的？" class="headerlink" title="计算机网络中输入一个url的全过程是怎样的？"></a>计算机网络中输入一个url的全过程是怎样的？</h4><ol><li>用户输入URL</li><li>浏览器检查URL的合法性、如果合法，进行DNS解析</li><li>浏览器向服务器发起TCP连接</li><li>建立TCP连接后，浏览器发送HTTP请求</li><li>服务器处理请求，返回响应结果</li><li>浏览器解析响应结果，渲染页面</li><li>断开TCP链接</li></ol><h4 id="JVM-为什么要分代-1"><a href="#JVM-为什么要分代-1" class="headerlink" title="JVM 为什么要分代"></a>JVM 为什么要分代</h4><p>因为不同类型的对象具有不同的生命周期和访问模式，因此采用不同的垃圾回收算法可以提高垃圾回收的效率和性能</p><p>分为新生代和老年代：</p><ul><li>新生代主要存放新创建的对象，内存大小相对会比较小，垃圾回收会比较频繁</li><li>老年代主要存放JVM认为生命周期比较长的对象，内存大小相对较大，垃圾回收没有那么频繁。</li></ul><h4 id="二进制的源码补码反码是如何转换的？java中的int类型的取值范围是多少？为什么？"><a href="#二进制的源码补码反码是如何转换的？java中的int类型的取值范围是多少？为什么？" class="headerlink" title="二进制的源码补码反码是如何转换的？java中的int类型的取值范围是多少？为什么？"></a>二进制的源码补码反码是如何转换的？java中的int类型的取值范围是多少？为什么？</h4><ul><li>源码：数字的二进制表示。</li><li>反码：正数的反码与源码 相同，负数的反码是源码符号位不变，数值为取反</li><li>补码：正数的补码与源码相同，负数的补码是反码+1</li><li>int类型是一个32为有符号位整数，取值范围为：-2^31到2^31-1.因为计算机使用二进制表示数字，所以int类型的取值范围是2的31次方</li></ul><h4 id="请描述一下Java内存模型中的缓存不一致问题？如何解决的？"><a href="#请描述一下Java内存模型中的缓存不一致问题？如何解决的？" class="headerlink" title="请描述一下Java内存模型中的缓存不一致问题？如何解决的？"></a>请描述一下Java内存模型中的缓存不一致问题？如何解决的？</h4><p>缓存不一致问题是由于多核处理器中各个核拥有独立的缓存，它们在同一时刻可能会对同一个数据进行读写操作。这会导致数据在各个核之间不一致。Java内存模型通过使用内存屏障和锁机制来解决缓存不一致问题。</p><h4 id="new一个对象的过程是怎样的"><a href="#new一个对象的过程是怎样的" class="headerlink" title="new一个对象的过程是怎样的?"></a>new一个对象的过程是怎样的?</h4><ol><li>分配内存空间</li><li>初始化对象头</li><li>调用构造方法进行初始化</li><li>返回对象引用</li></ol><h4 id="判断对象不再被使用，是通过哪几种算法？什么是GC-ROOTS？"><a href="#判断对象不再被使用，是通过哪几种算法？什么是GC-ROOTS？" class="headerlink" title="判断对象不再被使用，是通过哪几种算法？什么是GC ROOTS？"></a>判断对象不再被使用，是通过哪几种算法？什么是GC ROOTS？</h4><h4 id="CMS垃圾收集器的执行流程是怎样的？"><a href="#CMS垃圾收集器的执行流程是怎样的？" class="headerlink" title="CMS垃圾收集器的执行流程是怎样的？"></a>CMS垃圾收集器的执行流程是怎样的？</h4><ul><li>初始标记：标记GC Roots直接可达的对象</li><li>并发标记：遍历对象图，标记所有可达对象</li><li>并发预清理：处理并发标记期间产生的新对象</li><li>重新标记：修正并发标记期间产生的新对象的标记结果</li><li>并发清除：清除垃圾对象</li><li>并发重置：重置CMS数据结构和内存池的状态</li></ul><h4 id="G1垃圾回收器的执行流程是如何的？它和CMS相比，有什么优势？它是如何解决漏标问题的？是如何解决跨代引用问题的？"><a href="#G1垃圾回收器的执行流程是如何的？它和CMS相比，有什么优势？它是如何解决漏标问题的？是如何解决跨代引用问题的？" class="headerlink" title="G1垃圾回收器的执行流程是如何的？它和CMS相比，有什么优势？它是如何解决漏标问题的？是如何解决跨代引用问题的？"></a>G1垃圾回收器的执行流程是如何的？它和CMS相比，有什么优势？它是如何解决漏标问题的？是如何解决跨代引用问题的？</h4><p>流程：</p><ul><li>初始标记：标记GC Roots直接可达的对象。</li><li>并发标记：遍历对象图，标记所有可达对象。</li><li>最终标记：处理并发标记期间产生的新对象。</li><li>筛选回收：按优先级回收垃圾最多的区域。</li></ul><p>G1的优势：</p><ul><li>更好的吞吐量和延迟平衡</li><li>更可预测的停顿时间</li><li>更好的处理大堆内存</li></ul><p>采用原始快照加三色标记解决漏标</p><p>G1通过Remembered Set和Card Table解决了跨代引用问题</p><h4 id="G1和CMS有什么区别呢？他们分别是如何解决漏标问题的？"><a href="#G1和CMS有什么区别呢？他们分别是如何解决漏标问题的？" class="headerlink" title="G1和CMS有什么区别呢？他们分别是如何解决漏标问题的？"></a>G1和CMS有什么区别呢？他们分别是如何解决漏标问题的？</h4><p>G1与CMS的主要区别在于：</p><ul><li><p>G1是基于Region的收集器，而CMS是基于内存分代的收集器。</p></li><li><p>G1通过优先级回收垃圾最多的Region，能更好地平衡吞吐量和延迟。CMS主要关注降低暂停时间。</p><p>G1和CMS都使用并发标记和最终标记阶段来解决漏标问题</p></li></ul><h4 id="你对Java里的常量池是如何理解的？"><a href="#你对Java里的常量池是如何理解的？" class="headerlink" title="你对Java里的常量池是如何理解的？"></a>你对Java里的常量池是如何理解的？</h4><p>常量池是Java类文件结构中的一个重要组成部分。它存储了类文件的常量、符号引用等信息。在运行时，常量池会被加载到内存中，供程序访问。</p><h4 id="什么是线程安全和线程不安全"><a href="#什么是线程安全和线程不安全" class="headerlink" title="什么是线程安全和线程不安全"></a>什么是线程安全和线程不安全</h4><p>线程安全指的是在多个线程并发执行时，程序能够正确地处理共享数据，不会出现意外的结果。在线程安全的程序中，多个线程可以同时访问共享数据，但不会导致数据的破坏或不一致。</p><p>相反，线程不安全指的是在多个线程并发执行时，程序可能无法正确地处理共享数据，导致数据的破坏或不一致。在线程不安全的程序中，多个线程同时访问共享数据可能会导致数据竞争和其他问题，从而导致程序出现意外的结果。</p><p>线程安全和线程不安全通常是针对共享数据的访问和修改而言的。如果多个线程可以同时访问共享数据，并且不会导致数据的破坏或不一致，那么这些操作就是线程安全的。反之，如果多个线程访问共享数据可能会导致数据的破坏或不一致，那么这些操作就是线程不安全的。</p><h4 id="静态方法和实例方法"><a href="#静态方法和实例方法" class="headerlink" title="静态方法和实例方法"></a>静态方法和实例方法</h4><ul><li><p>静态方法是属于类的方法，可以通过类名直接调用，不创建类的实例对象的情况下直接使用。</p></li><li><p>实例方法是类的实例对象的方法，必须通过创建类的实例对象来使用。在实例方法中可以使用this关键字来引用类的实例对象</p></li></ul><h4 id="内存泄漏和内存溢出分别是什么意思？能举例说明一下什么是内存溢出吗？"><a href="#内存泄漏和内存溢出分别是什么意思？能举例说明一下什么是内存溢出吗？" class="headerlink" title="内存泄漏和内存溢出分别是什么意思？能举例说明一下什么是内存溢出吗？"></a>内存泄漏和内存溢出分别是什么意思？能举例说明一下什么是内存溢出吗？</h4><p>HashMap</p><h4 id="CAS（Compare-and-Swap）CAS很不错的理解"><a href="#CAS（Compare-and-Swap）CAS很不错的理解" class="headerlink" title="CAS（Compare and Swap）CAS很不错的理解"></a>CAS（Compare and Swap）<a href="https://blog.csdn.net/qq_32998153/article/details/79529704?ops_request_misc=%7B%22request_id%22:%22169102919816800182770050%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=169102919816800182770050&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-79529704-null-null.142%5Ev92%5EchatgptT0_1&utm_term=CAS&spm=1018.2226.3001.4187">CAS很不错的理解</a></h4><ul><li><p>CAS机制中使用了3个基本操作数：内存地址V，旧的预期值A，要修改的新值B</p></li><li><p>更新一个变量的时候，只有当变量的预期值A和内存地址V当中的实际值相同时，才会将内存地址V对应的值修改为B  </p></li><li><p>底层如何实现：JVM提供了unsafe<em><strong>*利用unsafe提供的原子性操作方法。*</strong></em></p></li><li><p>缺点：</p><ul><li><p>cpu开销过大</p></li><li><p>不能保证代码块的原子性</p></li><li><p>ABA问题：<em><strong>*当一个值从A变成B，又更新回A，普通CAS机制会误判通过检测。*</strong></em></p><p><em><strong>*利用版本号比较可以有效解决ABA问题。*</strong></em></p></li></ul></li></ul><h4 id="AQS原理，了解吗？能简单说一下吗？"><a href="#AQS原理，了解吗？能简单说一下吗？" class="headerlink" title="AQS原理，了解吗？能简单说一下吗？"></a>AQS原理，了解吗？能简单说一下吗？</h4><ul><li>AQS（Abstract Queued Synchronizer）是一个抽象的队列同步器，通过维护一个共享资源状态（volatile int state）和一个先进先出（FIFO）的线程等待队列来实现一个多线程访问共享资源的同步框架。</li><li>AQS维护了volatile int 类型的变量，用于表示当前的同步状态。volatile虽然不能保证操作的原子性，但是能保证当前变量state的可见性。</li><li>state的访问方式有三种：getState()、setState()、compareAndSetState()，均是原子操作</li><li>队列里的节点有两种模式：<ul><li>独占模式：一旦被占用，其他线程都不能占用</li><li>共享模式：一旦被占用，其他共享模式下的线程能占用</li></ul></li></ul><h4 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h4><p>当一个线程尝试获取某个锁时，如果该锁已被其他线程占用，就一直循环检测锁是否被释放，而不是进入线程挂起或睡眠状态。</p><h4 id="Synchronized的作用有哪些"><a href="#Synchronized的作用有哪些" class="headerlink" title="Synchronized的作用有哪些"></a>Synchronized的作用有哪些</h4><ul><li>原子性：确保线程互斥的访问同步代码；</li><li>可见性：保证共享变量的修改能够及时可见；</li><li>有序性：有效解决排序问题</li></ul><h4 id="Synchronized的用法"><a href="#Synchronized的用法" class="headerlink" title="Synchronized的用法"></a>Synchronized的用法</h4><ol><li>修饰普通方法：作用与当前对象实例，进入同步代码前要获得当前对象实例的锁</li><li>修饰静态方法：作用于当前类，进入同步代码前要获得当前类对象的锁，synchronized关键字加到 static 静态方法和 synchronized(class)代码块上都是是给 Class 类上锁</li><li>修饰代码块：指定加锁对象，对给定对象加锁，进入同步代码库前要获得给定对象的锁</li></ol><h4 id="Synchronized的实现原理"><a href="#Synchronized的实现原理" class="headerlink" title="Synchronized的实现原理"></a>Synchronized的实现原理</h4><ul><li><p>Synchronized是基于对象实现的。</p></li><li><p>对象在堆内存分出一片空间存储<a href="https://postimg.cc/mtTfwm15"><img src="https://i.postimg.cc/c4nxdjx0/Snipaste-2023-08-02-12-09-43.jpg" alt="Snipaste-2023-08-02-12-09-43.jpg"></a></p></li><li><p>展开MarkWord 在HotSpot虚拟机中<a href="https://postimg.cc/CZBW1t9z"><img src="https://i.postimg.cc/cJXZDGmM/20220629143044.png" alt="20220629143044.png"></a></p></li></ul><p>无锁：没有 </p><p>偏向锁存储的是当前占用此对象的线程ID；</p><p>轻量级则存储指向线程栈中锁记录的指针。</p><p>Synchronized在JVM里的实现都是 基于进入和退出Monitor对象来实现方法同步和代码块同步</p><ol><li><p><strong>MonitorEnter指令：插入在同步代码块的开始位置，当代码执行到该指令时，将会尝试获取该对象Monitor的所有权，即尝试获得该对象的锁；</strong></p></li><li><p><strong>MonitorExit指令：插入在方法结束处和异常处，JVM保证每个MonitorEnter必须有对应的MonitorExit；</strong></p><p>在Java虚拟机（HotSpot）中，Monitor是由ObjectMonitor实现的</p></li></ol><p><img src="https://i.postimg.cc/Hn364NC3/image-20230629170039335.png" alt="image-20230629170039335"></p><h4 id="能说一下什么是Java偏向锁吗？描述一下锁升级的过程？"><a href="#能说一下什么是Java偏向锁吗？描述一下锁升级的过程？" class="headerlink" title="能说一下什么是Java偏向锁吗？描述一下锁升级的过程？"></a>能说一下什么是Java偏向锁吗？描述一下锁升级的过程？</h4><p><img src="https://i.postimg.cc/Bvmt74hs/20220629143146.png" alt="20220629143146.png"></p><ol><li>在markword中，当锁标志位为01时，判断倒数第三个bit是否为1，如果是1，那么代表当前对象的锁是偏向锁，再去读markword的前25个bit，这25个bit的值就是线程ID，通过线程ID来确认想要获得对象锁的这个线程是不是只有一个线程来竞争锁，如果目前有多个线程正在竞争锁，那么将会从<strong>偏向锁升级为轻量级锁</strong>。</li><li>当看到锁标志位00，那么就知道为轻量级锁，这时线程会在虚拟机栈中开辟一块（LockRecord）的空间，在LockRecord中存放的是markword的副本和owner指针，线程通过CAS来获得锁，一旦获得那么将会复制该对象头中的markword到LockRecord中，并且将LockRecord中的owner指针指向该对象，另一方面，markword中的前61位bit将会生成一个指针指向线程虚拟机栈中的LockRecord，这样就实现了线程和对象锁的绑定。</li><li>当也有线程想要获得这个对象，此时其他线程会进行自旋等待，一旦自选等待的线程数超过一个，那么轻量级锁将会升级为重量级锁。</li></ol><h4 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h4><ul><li>ReentrantLock基于AQS，在并发编程中它可以实现公平锁和非公平锁来对共享资源进行同步，同时，和synchronized一样，ReentrantLock支持可重入</li></ul><h4 id="Synchronized和ReentrantLock区别？"><a href="#Synchronized和ReentrantLock区别？" class="headerlink" title="Synchronized和ReentrantLock区别？"></a>Synchronized和ReentrantLock区别？</h4><h4 id="Java创建线程的方式有哪些？线程的状态有哪些？请说一下如何让线程从Runable状态转换成Waiting状态？"><a href="#Java创建线程的方式有哪些？线程的状态有哪些？请说一下如何让线程从Runable状态转换成Waiting状态？" class="headerlink" title="Java创建线程的方式有哪些？线程的状态有哪些？请说一下如何让线程从Runable状态转换成Waiting状态？"></a>Java创建线程的方式有哪些？线程的状态有哪些？请说一下如何让线程从Runable状态转换成Waiting状态？</h4><ol><li>创建方式：<ol><li>继承Thread类，重写run()方法</li><li>实现Runnable接口，实现run()方法</li><li>实现Callable接口，实现call()方法</li></ol></li><li>状态：<ol><li>NEW：新创建的线程，尚未开始执行</li><li>RUNNABLE：正在Java虚拟机中执行的线程，可能正在等待CPU资源</li><li>BLOCKED：线程被阻塞等待监视器锁（synchronized）</li><li>WAITING：线程等待拎一个线程执行特定操作（wait、join）</li><li>TIMED_WAITING：线程等待另一个线程执行特定操作，但只等待一定时间（sleep、wait、join）</li><li>TERMINATED：线程已经执行完毕</li></ol></li><li>要让线程从RUNNABLE状态转换成WAITING状态，可以使用Object类的wait()方法，这会使当前线程进入WAITING状态，并且释放object对象的监视器锁。如果其他线程调用了该对象的notify()或notifyAll()方法，当前线程就会被唤醒并重新进入RUNNABLE状态。</li></ol><h4 id="线程池的核心参数有哪些？线程池的运行流程是怎样的？"><a href="#线程池的核心参数有哪些？线程池的运行流程是怎样的？" class="headerlink" title="线程池的核心参数有哪些？线程池的运行流程是怎样的？"></a>线程池的核心参数有哪些？线程池的运行流程是怎样的？</h4><ol><li>参数：<ul><li>核心线程数（corePoolSize）：线程池中的常驻线程数量，即使线程处于空闲状态也不会被回收。</li><li>最大线程数（maximumPoolSize）：线程池中允许存在的最大线程数，当工作队列已满并且当前线程数小于最大线程数时，会创建新的线程。</li><li>工作队列（workQueue）：用于存储等待执行的任务，当线程池中的线程数已经达到核心线程数时，新的任务会被放在工作队列中等待执行。</li><li>线程存活时间（keepAliveTime）：当线程池中的线程数大于核心线程数时，空闲线程在被回收前等待新任务的最长时间。</li><li>线程池拒绝策略（RejectedExecutionHandler）：当线程池和工作队列都已满时，新的任务将被拒绝执行，默认的拒绝策略是抛出RejectedExecutionException异常。</li></ul></li><li>线程池的运行流程如下：<ol><li>当有新的任务提交到线程池时，线程池会根据当前的线程数，决定是创建新的线程还是将任务放入工作队列中。</li><li>如果当前线程数小于核心线程数，即使有空闲线程也会创建新的线程执行任务。</li><li>如果当前线程数大于核心线程数，并且工作队列未满，新的任务会被放入工作队列中等待执行。</li><li>如果当前线程数大于等于核心线程数，并且工作队列已满但线程数未达到最大线程数，会创建新的线程执行任务。</li><li>如果当前线程数已经达到最大线程数，并且工作队列已满，会执行线程池拒绝策略。</li><li>当线程池中的线程数大于核心线程数时，空闲线程会等待一定时间后被回收，以减少系统资源的占用。</li></ol></li></ol><h4 id="volatile为什么不能保证原子性？它是怎么实现可见性的？"><a href="#volatile为什么不能保证原子性？它是怎么实现可见性的？" class="headerlink" title="volatile为什么不能保证原子性？它是怎么实现可见性的？"></a>volatile为什么不能保证原子性？它是怎么实现可见性的？</h4><h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4><h4 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h4><ul><li>并发：同一时间段，多个任务都在执行</li><li>并行：单位时间内，多个任务同时执行</li></ul><h4 id="什么是线程死锁？"><a href="#什么是线程死锁？" class="headerlink" title="什么是线程死锁？"></a>什么是线程死锁？</h4><ul><li>多个线程同时被阻塞，他们中的一个或者全部都在等待某个资源被释放。由于线程被无限期地阻塞，因此程序不可能正常终止。（线程A持有资源2，线程B持有资源1，他们都想申请对方的资源，所以这两个线程就会互相等待而进入死锁）</li></ul><h4 id="如何避免线程死锁"><a href="#如何避免线程死锁" class="headerlink" title="如何避免线程死锁"></a>如何避免线程死锁</h4><ul><li>破坏互斥条件：</li><li>破坏请求与保持条件：一次性申请所有的资源</li><li>破坏不剥夺条件：占用部分资源的线程进一步申请其他资源时，如果申请不到，可以主动释放它占有的资源。</li><li>破坏循环等待条件：靠按序申请资源来预防。按某一顺序申请资源，释放资源则反序释放。破坏循环等待条件。</li></ul><h4 id="sleep-方法和wait-方法的区别和共同点"><a href="#sleep-方法和wait-方法的区别和共同点" class="headerlink" title="sleep()方法和wait()方法的区别和共同点"></a>sleep()方法和wait()方法的区别和共同点</h4><ul><li>区别：sleep方法没有释放锁，而wait方法释放了锁</li><li>两者都可以暂停线程的执行，wait() 方法被调用后，线程不会自动苏醒，需要别的线程调用同一个对象上的 notify() 或者 notifyAll() 方法。sleep() 方法执行完成后，线程会自动苏醒。或者可以使用 wait(long timeout)超时后线程会自动苏醒。</li><li>wait通常被用于线程间交互&#x2F;通信，sleep通常被用于暂停执行</li></ul><h3 id="为什么我们调用-start-方法时会执行-run-方法，为什么我们不能直接调"><a href="#为什么我们调用-start-方法时会执行-run-方法，为什么我们不能直接调" class="headerlink" title="为什么我们调用 start() 方法时会执行 run() 方法，为什么我们不能直接调"></a>为什么我们调用 start() 方法时会执行 run() 方法，为什么我们不能直接调</h3><p>调用 start 方法方可启动线程并使线程进入就绪状态，而 run 方法只是 thread 的一个普通方法调用，还是在主线程里执行。</p><h4 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h4><ol><li>定义：ThreadLocal是线程内存的数据存储类，该存储类存储的对象只能在指定线程内部才能使用，其他线程中无法获取。</li><li>使用场景：<ul><li>同一个线程内参数的传递</li><li>@Transactional</li></ul></li></ol><h4 id="引用类型："><a href="#引用类型：" class="headerlink" title="引用类型："></a>引用类型：</h4><ul><li>强引用：某个对象没有引用指向他，该对象就会被回收。否则，他永远不会被回收，直到OOM（内存溢出）</li><li>弱引用：每次进行GC时会回收弱引用。</li><li>软引用：空间够的时候任意分配，空间不够的时候软引用会被回收</li></ul><h4 id="GET-x2F-POST的区别？"><a href="#GET-x2F-POST的区别？" class="headerlink" title="GET&#x2F;POST的区别？"></a>GET&#x2F;POST的区别？</h4><ul><li><p>参数位置：GET请求的参数一般会放在URL的查询字符串中，而POST请求的参数则放在请求体中。</p></li><li><p>参数大小限制：由于URL长度的限制，GET请求的参数大小一般比较小，而POST请求的参数大小则没有限制。</p></li><li><p>缓存：GET请求可以被浏览器缓存，而POST请求不会被缓存。</p></li><li><p>安全性：由于GET请求的参数会出现在URL中，因此相对来说比POST请求不够安全。例如，一个包含用户名和密码的表单，使用GET请求时，这些敏感信息会被明文传输到服务器，容易被截获，而使用POST请求时，这些信息会被放在请求体中，相对安全一些。</p></li><li><p>幂等性：GET请求是幂等的，即多次请求相同的URL会返回相同的结果，不会对资源产生影响；而POST请求不一定是幂等的，即多次请求相同的URL可能会产生不同的结果，会对资源产生影响。</p></li></ul><h4 id="Autowried和-Resource的区别？"><a href="#Autowried和-Resource的区别？" class="headerlink" title="@Autowried和@Resource的区别？"></a>@Autowried和@Resource的区别？</h4><ol><li>来源不同：@Autowired是Spring提供的注解，而@Resource是JavaEE提供的注解，需要使用J2EE或JavaEE容器支持。</li><li>自动装配策略不同：@Autowired默认按照类型进行自动装配，如果有多个类型匹配时，可以通过@Qualifier注解指定具体的Bean名称；@Resource默认按照名称进行自动装配，如果没有指定名称，则默认使用属性名作为Bean名称。</li><li>注入方式不同：@Autowired注解可以用在属性、构造方法、setter方法等不同的位置上进行注入，而@Resource注解只能用在属性上进行注入。</li><li>兼容性不同：@Autowired注解是Spring提供的，因此在Spring框架中使用时更加方便，而@Resource注解是JavaEE提供的，如果使用Spring框架，需要额外引入JavaEE相关的依赖。</li></ol><h4 id="Spring的启动"><a href="#Spring的启动" class="headerlink" title="Spring的启动"></a>Spring的启动</h4><ol><li>初始化Spring容器，注册内置的BeanPostProcessor的BeanDefinition到容器中；</li><li>将配置类的BeanDefinition注册到容器中；</li><li>调用refresh()方法刷新新容器；</li></ol><h4 id="Spring怎么解决循环依赖"><a href="#Spring怎么解决循环依赖" class="headerlink" title="Spring怎么解决循环依赖"></a>Spring怎么解决循环依赖</h4><ul><li>两个或两个以上的bean互相持有（依赖）对方，最终形成闭环，这就是循环依赖。</li><li>Spring中循环依赖场景有：<ul><li>构造器的循环依赖</li><li>field属性的循环依赖</li></ul></li><li>Spring的循环依赖的理论依据其实是基于Java的引用传递，当我们获取对象的引用时，对象的field或则属性是可以延后设置的（但是构造器必须是在获取引用之前）</li><li>Spring使用了三级缓存解决属性循环依赖问题</li></ul><h4 id="Spring-比较核心的模块"><a href="#Spring-比较核心的模块" class="headerlink" title="Spring 比较核心的模块"></a>Spring 比较核心的模块</h4><ul><li><strong>SpringCore</strong>：这是Spring框架的核心模块，提供了IoC（控制反转）和依赖注入（DI）功能。它包含了Spring框架的基本组件，如Bean Factory、ApplicationContext等，用于管理和配置应用程序中的对象。</li><li><strong>SpringMVC</strong>：这是Spring框架的Web模块，提供了基于MVC（Model-View-Controller）的Web应用程序的开发支持。它包括用于处理请求、渲染视图、处理表单数据和处理异常等功能。</li><li><strong>Spring Data</strong>：这是Spring框架的数据访问模块，提供了简化数据库访问的抽象和工具。它支持多种数据访问技术，如关系型数据库、NoSQL数据库和其他数据存储。</li><li><strong>Spring Security</strong>：这是Spring框架的安全性模块，提供了身份验证、授权、加密和其他安全性功能。它可以集成到Spring应用程序中，保护应用程序的资源和数据。</li><li><strong>Spring AOP</strong>：这是Spring框架的AOP（面向切面编程）模块，提供了面向切面编程的支持。它允许开发人员将横切关注点（如日志记录、事务管理）从主要业务逻辑中分离出来，以增强应用程序的模块性和可重用性。</li><li><strong>Spring Test</strong>：这是Spring框架的测试模块，提供了对Spring应用程序进行单元测试和集成测试的支持。它包括用于创建和管理测试环境、模拟对象和执行测试的工具。</li></ul><h4 id="Spring的自动装配"><a href="#Spring的自动装配" class="headerlink" title="Spring的自动装配"></a>Spring的自动装配</h4><ol><li>使用xml配置中共有五种自动装配：<ul><li>no：默认的方式是不进行自动装配的，通过手工设置ref属性来进行装配bean。</li><li>byName：通过bean的名称进行自动装配，如果一个bean的 property 与另一bean 的name 相同，就进行自动装配。</li><li>byType：通过参数的数据类型进行自动装配。</li><li>constructor：利用构造函数进行装配，并且构造函数的参数通过byType进行装配。</li><li>autodetect：自动探测，如果有构造方法，通过 construct的方式自动装配，否则使用 byType的方式自动装配。</li></ul></li><li>基于注解的自动装配方式：使用@Autowired、@Resource注解来自动装配指定的bean。在使用@Autowired注解之前需要在Spring配置文件进行配置，在启动spring IoC时，容器自动装载了一个AutowiredAnnotationBeanPostProcessor后置处理器，当容器扫描到@Autowied、@Resource或@Inject时，就会在IoC容器自动查找需要的bean，并装配给该对象的属性。在使用@Autowired时，首先在容器中查询对应类型的bean：</li></ol><h4 id="Spring事务的实现方式和实现原理"><a href="#Spring事务的实现方式和实现原理" class="headerlink" title="Spring事务的实现方式和实现原理"></a>Spring事务的实现方式和实现原理</h4><p>Spring事务的本质其实就是数据库对事务的支持，没有数据库的事务支持，Spring是无法提供事务功能的。Spring只提供统一事务管理接口，具体实现都是由各数据库自己实现，数据库事务的提交和回滚是通过binlog或者undo log实现的。Spring会在事务开始时，根据当前环境中设置的隔离级别，调整数据库隔离级别，由此保持一致。</p><h4 id="Spring事务的种类："><a href="#Spring事务的种类：" class="headerlink" title="Spring事务的种类："></a>Spring事务的种类：</h4><ul><li>编程式事务管理使用TransactionTemplete</li><li>声明式事务管理建立在AOP至上的。</li></ul><h4 id="Spring事务的隔离级别"><a href="#Spring事务的隔离级别" class="headerlink" title="Spring事务的隔离级别"></a>Spring事务的隔离级别</h4><ul><li><strong>DEFAULT</strong>（默认）：使用底层数据库的默认隔离级别</li><li><strong>READ_UNCOMMITTED</strong>：最低的隔离级别，允许一个事务读取另一个事务尚未提交的数据。可能导致脏读、不可重复读和幻影读问题。</li><li><strong>READ_COMMITTED（读已提交）</strong>：确保一个事务只能读取到已经提交的数据。避免了脏读问题，但仍可能出现不可重复读和幻影读问题。</li><li><strong>REPEATABLE_READ（可重复读）</strong>：确保一个事务在多次读取同一数据时，能够看到一致的结果。避免了脏读和不可重复读问题，但仍可能出现幻影读问题。</li><li><strong>SERIALIZABLE（串行化）</strong>：最高的隔离级别，通过对事务进行串行化执行，避免了脏读、不可重复读和幻影读问题。但是，由于串行执行的特性，可能会降低并发性能。</li></ul><h4 id="Spring事务什么时候会失效"><a href="#Spring事务什么时候会失效" class="headerlink" title="Spring事务什么时候会失效"></a>Spring事务什么时候会失效</h4><ul><li>Spring事务的原理是AOP，进行了切面增强，那么失效的根本原因是这个AOP不起作用了</li><li>常见情况：<ul><li>方法不是public</li><li>数据库不支持事务</li><li>没有被Spring管理</li><li>异常被catch，事务不会回滚</li></ul></li></ul><h4 id="spring中如何添加事务"><a href="#spring中如何添加事务" class="headerlink" title="spring中如何添加事务"></a>spring中如何添加事务</h4><ul><li>添加事务：<ul><li>配置事务管理器</li><li>启用事务支持</li><li>添加事务注解@Transaction</li></ul></li></ul><h4 id="什么是依赖注入"><a href="#什么是依赖注入" class="headerlink" title="什么是依赖注入"></a>什么是依赖注入</h4><p>在Spring创建对象的过程中，把对象依赖的属性注入到对象中。依赖注入主要有两种方式：构造器注入 和属性注入。</p><h4 id="IOC的理解"><a href="#IOC的理解" class="headerlink" title="IOC的理解"></a>IOC的理解</h4><ol><li><p><strong>IOC即控制反转，把对象的创建、初始化、销毁交给Spring管理，而不是由开发者控制，实现控制反转。IOC容器是Spring 用来实现IOC的载体，IOC容器实际上就是个Map（key，value），Map中存放的各种对象。</strong></p></li><li><p><strong>IOC思想基于IOC容器完成，IOC容器底层就是对象工厂（BeanFactory接口）。IOC的原理是基于xml解析、工厂设计模式、反射实现的。使用IOC可以降低代码的耦合度。</strong></p></li><li><p>Spring提供IOC容器的两种实现方式：</p><ul><li>BeanFactory：IOC容器基本实现，是Spring内部的使用接口，在加载配置文件时候不会创建对象，在获取对象（使用）才去创建对象</li><li>ApplicationContext：Beanfactory接口的子接口，在加载配置文件时候就会把在配置文件对象进行创建</li></ul></li><li><p>IOC管理Bean管理</p><p>IOC操作Bean管理有两种形式，一种是基于xml方式，另一种是基于注解方式。</p><p>基于xml方式的Bean管理，Spring主要提供了<bean><property>等标签。基于注解方式的Bean管理，Spring主要提供了@Component  @Service  @Controller   @Repository等注解。</p></li></ol><h4 id="AOP的理解"><a href="#AOP的理解" class="headerlink" title="AOP的理解"></a>AOP的理解</h4><ol><li>AOP的概念：AOP（面向切面编程），<strong>利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</strong></li><li>AOP的底层原理：AOP底层是使用动态代理来实现的，<ol><li>有接口的情况，使用JDK动态代理；即创建接口实现类代理对象，增强类的方法。</li><li>没有接口的情况，使用CGLB动态代理；及创建子类的代理对象，增强类方法。</li></ol></li><li>应用场景：AOP应用于权限校验和日志管理。</li></ol><h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4><ul><li>静态代理是通过手动编写代理类实现的，代理类和被代理类实现了同样的接口或继承同一父类。在代理类中，我们可以调用被代理类的方法之前或之后添加额外的逻辑。静态代理的缺点是每个被代理类都需要编写一个对应的代理类，当需要代理多个类时会增加代码量</li><li><a href="https://www.cnblogs.com/jqyp/archive/2010/08/20/1805041.html">java动态代理（JDK和cglib） - ①块腹肌 - 博客园 (cnblogs.com)</a></li></ul><h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><p>JDK动态代理是在运行时通过Java反射机制动态生成代理类的方式实现的。他不需要手动编写代理类，只需要实现InvocationHandler接口并重写invoke方法，在invoke方法中，我们可以通过反射调用被代理类的方法，并在调用前后添加额外的逻辑。JDK动态代理的优点是可以代理任意实现了接口的类，且不需要编写大量的代理类。</p><h4 id="cjlib动态代理"><a href="#cjlib动态代理" class="headerlink" title="cjlib动态代理"></a>cjlib动态代理</h4><p>cglib是针对类来实现代理的，他的原理是对指定的目标类生成一个子类，并覆盖其中方法实现增强，但因为采用的是继承，所以不能对final修饰的类进行代理。 </p><h4 id="bean的生命周期"><a href="#bean的生命周期" class="headerlink" title="bean的生命周期"></a>bean的生命周期</h4><ol><li>实例化：当容器启动时，Spring会根据配置文件或注解等方式创建Bean的实例</li><li>属性赋值：在Bean实例化后，Spring会根据文件或注解等方式为Bean的属性进行赋值</li><li>初始化Bean：</li><li>使用Bean：</li><li>销毁Bean：</li></ol><h4 id="声明一个-Bean-可以使用以下注解："><a href="#声明一个-Bean-可以使用以下注解：" class="headerlink" title="声明一个 Bean 可以使用以下注解："></a><strong>声明一个 Bean 可以使用以下注解</strong>：</h4><ol><li><code>@Component</code>：通用的注解，用于声明一个 Bean。可以用于任何类，例如普通类、服务类、数据访问类等。</li><li><code>@Service</code>：用于声明一个服务类的 Bean。通常用于业务逻辑层的类。</li><li><code>@Repository</code>：用于声明一个数据访问类的 Bean。通常用于访问数据库、文件系统等持久化存储的类。</li><li><code>@Controller</code>：用于声明一个 MVC 控制器的 Bean。通常用于处理用户请求、控制页面导航等功能的类。</li><li><code>@Configuration</code>：用于声明一个配置类的 Bean。通常用于配置应用程序的参数、初始化 Bean 等功能的类。</li></ol><h4 id="注入一个-Bean-可以使用以下方式："><a href="#注入一个-Bean-可以使用以下方式：" class="headerlink" title="注入一个 Bean 可以使用以下方式："></a><strong>注入一个 Bean 可以使用以下方式：</strong></h4><ol><li>构造器注入：通过在构造函数中声明参数来注入 Bean。</li><li>Setter 方法注入：通过在类中定义 setter 方法，并在方法中使用 <code>@Autowired</code>、<code>@Resource</code> 或 <code>@Inject</code> 等注解来标识需要注入的 Bean。</li><li>字段注入：通过在类中定义字段，并在字段上使用 <code>@Autowired</code>、<code>@Resource</code> 或 <code>@Inject</code> 等注解来标识需要注入的 Bean。</li><li>接口注入：通过在接口中定义 setter 方法，并在实现类中实现该方法，并使用 <code>@Autowired</code>、<code>@Resource</code> 或 <code>@Inject</code> 等注解来标识需要注入的 Bean。</li></ol><h4 id="BeanFactory和FactoryBean的区别？"><a href="#BeanFactory和FactoryBean的区别？" class="headerlink" title="BeanFactory和FactoryBean的区别？"></a>BeanFactory和FactoryBean的区别？</h4><ul><li>BeanFactory：管理Bean的容器，Spring中生成的Bean都是由这个接口的实现来管理的。</li><li>FactoryBean：通常是用来创建比较复杂的bean，一般的bean 直接用xml配置即可，但如果一个bean 的创建过程中涉及到很多其他的bean 和复杂的逻辑，直接用xml配置比较麻烦，这时可以考虑用 FactoryBean，可以隐藏实例化复杂Bean的细节。</li></ul><h4 id="BeanFactory和ApplicationContext有什么区别"><a href="#BeanFactory和ApplicationContext有什么区别" class="headerlink" title="BeanFactory和ApplicationContext有什么区别"></a>BeanFactory和ApplicationContext有什么区别</h4><ul><li><p>BeanFactory和ApplicationContext是Spring的两大核心接口，都可以当做Spring的容器。其中 ApplicationContext是BeanFactory的子接口。</p></li><li><p>区别：</p><ul><li>功能上的区别。BeanFactory是Spring里面最底层的接口，包含了各种Bean的定义，读取bean配置 文档，管理bean的加载、实例化，控制bean的生命周期，维护bean之间的依赖关系。 ApplicationContext接口作为BeanFactory的派生，除了提供BeanFactory所具有的功能外，还提供了更 完整的框架功能，如继承MessageSource、支持国际化、统一的资源文件访问方式、同时加载多个配置 文件等功能。</li><li>加载方式的区别。BeanFactroy采用的是延迟加载形式来注入Bean的，即只有在使用到某个Bean时 (调用getBean())，才对该Bean进行加载实例化；ApplicationContext是在容器启动时，一次性创建了所有的Bean</li><li>创建方式的区别。BeanFactory通常以编程的方式被创建，ApplicationContext还能以声明的方式创 建，如使用ContextLoader。</li><li>注册方式的区别。BeanFactory和ApplicationContext都支持BeanPostProcessor、 BeanFactoryPostProcessor的使用，但两者之间的区别是：BeanFactory需要手动注册，而 ApplicationContext则是自动注册。</li></ul></li></ul><h4 id="Autowired和-Resource的区别"><a href="#Autowired和-Resource的区别" class="headerlink" title="@Autowired和@Resource的区别"></a>@Autowired和@Resource的区别</h4><p><code>@Autowired</code> 是 Spring 提供的注解，可以自动装配 Bean，支持按类型和名称注入；<code>@Resource</code> 是 Java EE 提供的注解，可以注入任何对象，支持按名称注入；</p><h4 id="Spring和SpringBoot区别"><a href="#Spring和SpringBoot区别" class="headerlink" title="Spring和SpringBoot区别"></a>Spring和SpringBoot区别</h4><h4 id="springMVC和springBoot区别"><a href="#springMVC和springBoot区别" class="headerlink" title="springMVC和springBoot区别"></a>springMVC和springBoot区别</h4><h4 id="SpringMVC的加载流程"><a href="#SpringMVC的加载流程" class="headerlink" title="SpringMVC的加载流程"></a>SpringMVC的加载流程</h4><h4 id="能简单说有一下SpringMVC的实现原理吗？"><a href="#能简单说有一下SpringMVC的实现原理吗？" class="headerlink" title="能简单说有一下SpringMVC的实现原理吗？"></a>能简单说有一下SpringMVC的实现原理吗？</h4><h4 id="Spring-mvc调用流程是怎么样的？"><a href="#Spring-mvc调用流程是怎么样的？" class="headerlink" title="Spring mvc调用流程是怎么样的？"></a>Spring mvc调用流程是怎么样的？</h4>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM学习</title>
      <link href="/2023/06/14/JVM/"/>
      <url>/2023/06/14/JVM/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h1><hr><h2 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h2><p>  把.class文件，加载到内存当中构建类对象分为三步：</p><blockquote><ol><li><strong>加载</strong>: 查找并加载类的二进制数据。类加载器通过类的全限定名来定位并读取对应的.class文件，将字节流转换为JVM能够使用的数据结构，并在方法区中生成一个代表该类的Class对象。</li><li><strong>连接</strong>:<blockquote><ul><li>验证:  确认类型符合Java语言的语义,检查各个类之间的二进制兼容性(比如final的类不用拥有子类等),另外还需要进行符号引用的验证;</li><li>准备:  Java虚拟机为类变量分配内存,设置默认初始值;</li><li>解析:  在类型的常量池中寻找类,接口,字段和方法的符号引用,把这些符号引用替换成直接引用的过程.</li></ul></blockquote></li><li><strong>初始化</strong>:当一个类被主动使用时，即创建对象、使用静态方法或字段，反射、初始化子类等，Java虚拟机就会对其初始化。</li></ol></blockquote><h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><ol><li>分类:</li></ol><ul><li>Java虚拟机自带的类加载器:<blockquote><ul><li>根加载器(Bootstrap classloader)</li><li>扩展类加载器(Extension classloader)</li><li>应用程序类加载器(Application classloader)</li></ul></blockquote></li><li>用户自定义的类加载器:java.lang.ClassLoader的子类，用户可以定制类的加载方式</li></ul><p>2.双亲委派机制<br><img src="https://i.postimg.cc/DZ1sC42L/jiazai4.jpg"></p><blockquote><p>java在加载类时默认采用的是双亲委派机制，在每个特定的类加载器在接收到加载类的请求时，首先将加载任务委托给父类加载器，依次递归，如果父类加载器可以完成加载任务，就成功返回；只有付类加载器无法完成此加载任务时，才自己去加载；</p></blockquote><p>举个例子 </p><blockquote><p>就在用户自定义一个java.lang.String;执行时会先到Application ClassLoader加载器，再到Extension ClassLoader加载器，最后到BootStrap ClassLoader加载器上，在BootStrap ClassLoader上会调用它JDK自带的Java.lang.String </p></blockquote><h3 id="类实例化的顺序"><a href="#类实例化的顺序" class="headerlink" title="类实例化的顺序"></a>类实例化的顺序</h3><ol><li><p>静态属性，静态代码块</p></li><li><p>普通属性, 普通代码块</p></li><li><p>构造方法</p><pre><code> public class LifeCycle &#123;   // 静态属性 private static String staticField = getStaticField();    // 静态代码块 static &#123;     System.out.println(staticField);     System.out.println(&quot;静态代码块初始化&quot;);   &#125;        // 普通属性 private String field = getField();  // 普通代码块 &#123;     System.out.println(field);     System.out.println(&quot;普通代码块初始化&quot;); &#125;  // 构造方法 public LifeCycle() &#123;     System.out.println(&quot;构造方法初始化&quot;); &#125;  // 静态方法 public static String getStaticField() &#123;     String statiFiled = &quot;静态属性初始化&quot;;     return statiFiled; &#125;  // 普通方法 public String getField() &#123;     String filed = &quot;普通属性初始化&quot;;     return filed; &#125;  public static void main(String[] argc) &#123;     new LifeCycle(); &#125;      静态属性初始化     静态代码块初始化     普通属性初始化     普通代码块初始化     构造方法初始化     开始 --&gt; 父类的静态代码块 --&gt; 子类的静态代码块 --&gt; 父类的普通代码块 --&gt; 父类的构造方法--&gt; 子类的普通代码块 --&gt; 子类的构造方法 --&gt; 结束          静态代码块(也就是被关键字static修饰的代码块)只在程序初次运行时执行一次,也就是说,无论你实例化(new)多少个对象,静态代码块都只执行一次;其原因就在于静态代码块只是在类被加载进内存时执行,而类加载到内存中只需执行一次,所以静态代码块也就只执行一次. &#125;</code></pre></li></ol><hr><h2 id="JVM的内存结构"><a href="#JVM的内存结构" class="headerlink" title="JVM的内存结构"></a>JVM的内存结构</h2><p><img src="https://i.postimg.cc/L4wnmzMd/jvm1.png" alt="jvm1.png"></p><h3 id="JVM内存空间分布如下"><a href="#JVM内存空间分布如下" class="headerlink" title="JVM内存空间分布如下:"></a>JVM内存空间分布如下:</h3><p>线程私有的：程序计数器（用于存储当前线程执行的字节码指令的地址）、Java虚拟机栈（用于存储每个线程运行时的方法调用栈、局部变量表、操作数栈等信息）、本地方法栈（管理本地方法的调用,）</p><p>线程共享的：堆（用于存储Java对象实例，包括程序员创建的对象和JVM运行时创建的对象）、方法区（用于存储类的信息、常量、静态变量、编译器编译后的代码等）</p><ul><li>程序计数器(<strong>线程私有的</strong>)</li></ul><p>每个程序都有一个程序计数器,是<strong>线程私有的</strong>,指向方法区中的方法字节码:<strong>用来存储指向一条指令的地址,也即将要执行的下一条指令代码</strong>.</p><ul><li><p>Java虚拟机栈(<strong>线程私有的</strong>)<br><img src="https://i.postimg.cc/sf4h2xsf/2.jpg" alt="栈"></p><ul><li>栈:每个线程在创建时都会创建一个虚拟机栈,内部存储的一个个栈帧(Stack Frame),对应Java方法调用.其生命周期和线程一致,<strong>随着线程的结束而销毁</strong>.</li><li>特点:快速有效的分配存储方式,访问速度仅次于程序计数器.JVM对Java栈的操作只有两个:<br>(1). 每个方法执行,伴随着进栈(入栈,压栈);<br>(2). 执行结束后的出栈工作;<br>(3). 栈不存在垃圾回收问题(栈存在溢出情况);可以通过-Xss来设置线程的最大栈空间。</li></ul></li><li><p>本地方法栈(<strong>线程私有的</strong>)</p></li></ul><p>管理本地方法的调用,存放native修饰的方法</p><ul><li><p>堆(<strong>线程共享的</strong>)</p><ul><li>内存空间当中最大的区域，<strong>存放new出来的对象和数组</strong>；垃圾回收主要发生在堆中<br> <img src="https://i.postimg.cc/Bn9yqmg1/image.jpg" alt="&quot;堆内存结构&quot;"></li><li>可以通过-Xms：设置堆区的起始内存；—Xmx设置堆区的最大内存</li><li></li></ul></li><li><p>方法区(<strong>线程共享的</strong>)</p><ul><li><strong>主要是用来存放已被虚拟机加载的类相关信息：包括类信息(类的版本、字段、方法、接口和父类等)、常量池(静态常量池和运行时常量池)</strong></li><li><strong>在JDK1.8之前，方法区的实现从永久代改为元空间</strong></li><li>在JDK1.6之前的版本，常量池都存储在方法区；</li><li>JDK1.7中，静态常量池存放到了堆中，而运行时常量池海仍然存储在方法区中；</li><li>JDK1.8中，类型信息、字段、方法、常量保存在本地内存的云空间上，静态常量池和运行时常量池都存放在堆中。</li><li>Minor GC 发生在新生代的Eden(aiden)区；<strong>主要采用复制算法</strong><blockquote><p>new出来的对象会放在Eden区，当Eden区满了之后会触发GC操作，此时MinorGC会把Eden和Survivor From的对象进行收集，将存活的对象放到Survivor To区，同时年龄+1；当Survivor to中的对象经历15次GC操作仍然存活将会移到老年代。注：只有Eden区&#96;满了才会触发MinorGC操作，Survivor区满了不会触发。</p></blockquote></li><li>Major GC 发生在老年代<blockquote><p>当出现老年代空间不足时，会先尝试触发MinorGC。如果之后空间还是不足，则触发MajorGC。</p></blockquote></li><li>Full GC：发生在整个Java堆和方法区<ul><li>触发条件：<blockquote><ul><li>调用System.gc()时，系统建议执行Full GC，但是不必然执行；</li><li>老年代空间不足。</li><li>方法区空间不足。 </li><li>通过Minor GC后进入老年代的平均水平大于老年代的可用内存。</li><li>由Eden区、survivor spacee（From Space）区向survivor spacel（To Space）区复制时，对象大小大于To Space可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小。</li></ul></blockquote></li></ul></li></ul></li><li><p>直接内存</p></li></ul><hr><h2 id="判断对象死亡的两种方法"><a href="#判断对象死亡的两种方法" class="headerlink" title="判断对象死亡的两种方法"></a>判断对象死亡的两种方法</h2><p>1.引用计数法</p><ul><li><p>当对象被引用了则+1，但对象引用失败则-1.当计数器为0时，说明对象不再被引用，可以被回收。</p></li><li><p>缺点：如果对象存在循环依赖，那就无法定位该对象是否应该被回收（A依赖B，B依赖A）</p></li></ul><p>2.<strong>可达性分析法</strong></p><ul><li><p>他从<strong>GC Roots</strong>开始向下搜索，节点所走过的路径成为引用链，当一个对象到GC Roots没有任何引用链相连的话，则证明此对象是不可用的。</p></li><li><p>在进行时会用到oopmap, oopmap是Java HotSpot虚拟机中的一种数据结构，用于标记一个对象的哪些字段是指向其他对象的引用。oopmap的全称是”Object Oriented Pointer Map”，其主要作用是帮助垃圾回收器判断对象中哪些引用是指向其他对象的，从而进行准确的垃圾回收。<br><img src="https://i.postimg.cc/sDRHgZ1q/6.jpg"></p></li></ul><h3 id="GC-Roots"><a href="#GC-Roots" class="headerlink" title="GC Roots"></a><strong>GC Roots</strong></h3><ul><li><p>定义：GC Roots是指程序中被认为是活动和正在使用的对象。</p></li><li><p>类型：</p><ol><li>虚拟机栈（栈帧中的本地变量表）中引用的对象</li></ol><ul><li>a 是栈帧中的本地变量，当 a &#x3D; null 时，由于此时 a 充当了 GC Root 的作用，a 与原来指向的实例 new Test() 断开了连接，所以对象会被回收。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public  class Test &#123;</span><br><span class="line">  public static  void main(String[] args)&#123;</span><br><span class="line">    Test a = new Test;</span><br><span class="line">    a = null;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>本地方法栈中JNI（即Native方法）引用的对象</li></ol><ul><li>如下代码所示，当栈帧中的本地变量 a &#x3D; null 时，由于 a 原来指向的对象与 GC Root (变量 a) 断开了连接，所以 a 原来指向的对象会被回收，而由于我们给 s 赋值了变量的引用，s 在此时是类静态属性引用，充当了 GC Root 的作用，它指向的对象依然存活!  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">  public static Test s;</span><br><span class="line">  public static  void main(String[] args) &#123;</span><br><span class="line">    Test a = new Test();</span><br><span class="line">    a.s = new Test();</span><br><span class="line">    a = null;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>方法区中类静态属性引用的对象</li></ol><ul><li>如下代码所示，常量 s 指向的对象并不会因为 a 指向的对象被回收而回收 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">  public static final Test s = new Test();</span><br><span class="line">  public static void main(String[] args) &#123;</span><br><span class="line">  Test a = new Test();</span><br><span class="line">  a = null;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li>方法区中常量引用的对象</li></ol></li></ul><h3 id="STW-stop-the-world"><a href="#STW-stop-the-world" class="headerlink" title="STW(stop the world)"></a>STW(stop the world)</h3><ul><li>定义：指GC事件发生过程中，会产生应用程序的停顿。停顿产生时整个应用线程都会被暂停，没有任何响应。</li><li>可达性分析算法中枚举根节点(GC Roots)会导致所有Java执行线程停顿。</li><li>STW是JVM在后台自动发起和自动完成的。在用户不可见的情况下，把用户正常的工作线程全部停掉。</li></ul><hr><p><img src="https://i.postimg.cc/V6Mvhjqw/junk.jpg"></p><hr><h2 id="常见的垃圾回收器"><a href="#常见的垃圾回收器" class="headerlink" title="常见的垃圾回收器"></a>常见的垃圾回收器</h2><h4 id="1-Serial收集器"><a href="#1-Serial收集器" class="headerlink" title="1. Serial收集器"></a>1. Serial收集器</h4><p>串行收集器是最古老，最稳定以及效率高的收集器，可能会产生较长的停顿，<strong>只能用一个线程去回收。新生代、老年代使用串行回收；新生代复制算法、老年代标记-压缩；在垃圾收集过程会STW</strong></p><h4 id="2-Serial-Old收集器"><a href="#2-Serial-Old收集器" class="headerlink" title="2. Serial Old收集器"></a>2. Serial Old收集器</h4><h4 id="3-ParallelNew收集器"><a href="#3-ParallelNew收集器" class="headerlink" title="3. ParallelNew收集器"></a>3. ParallelNew收集器</h4><p><strong>新生代并行，老年代串行；新生代复制算法，老年代标记-压缩；使用多线程</strong></p><h4 id="4-Parallel-Scavenage收集器"><a href="#4-Parallel-Scavenage收集器" class="headerlink" title="4. Parallel Scavenage收集器"></a>4. Parallel Scavenage收集器</h4><p>Parallel Scavenge收集器类似ParNew收集器，Parallel收集器更关注系统的吞吐量。</p><h4 id="5-parallel-Old收集器"><a href="#5-parallel-Old收集器" class="headerlink" title="5. parallel Old收集器"></a>5. parallel Old收集器</h4><p>arallel Old是Parallel Scavenge收集器的老年代版本，使用多线程和“标记－整理”算法。这个收集器是在JDK 1.6中才开始提供。</p><h4 id="6-CMS收集器（Concurrent-Mark-Sweep）（老年代）"><a href="#6-CMS收集器（Concurrent-Mark-Sweep）（老年代）" class="headerlink" title="6. CMS收集器（Concurrent Mark Sweep）（老年代）"></a>6. <strong>CMS收集器</strong>（Concurrent Mark Sweep）（老年代）</h4><ul><li><p>定义：CMS收集器是一种以获取最短回收停顿时间为目标的收集器。</p></li><li><p>基于“标记-清除”算法实现的，分为四部：</p><ul><li><p>初始标记(会发生STW)</p><ul><li>初始标记会标记GCRoots直接关联的对象以及年轻代指向老年代的对象</li></ul></li><li><p>并发标记</p><ul><li>不会停止用户线程的（不会发生 Stop The World）。这一阶段主要是从GC Roots向下追溯，标记所有可达的对象。</li></ul></li><li><p>重新标记(会发生STW)</p><ul><li>重新标记阶段会Stop The World，这个过程的停顿时间其实很大程度上取决于上面并发预处理阶段（可以发现，这是一个追赶的过程：一边在标记存活对象，一边用户线程在执行产生垃圾）</li></ul></li><li><p>并发清除</p><ul><li>并发清除阶段，不会Stop The World一边用户线程在执行，一边GC线程在回收不可达的对象.这个过程，还是有可能用户线程在不断产生垃圾，但只能留到下一次GC 进行处理了，产生的这些垃圾被叫做“浮动垃圾”</li></ul></li></ul></li><li><p>缺点：</p><ul><li>空间需要预留位置，CMS垃圾收集器可以一边回收垃圾，一边处理用户线程，那需要在这个过程中保证有充足的内存空间供用户使用。</li><li>浮动垃圾：由于垃圾回收和用户线程是同时进行的，在进行标记或者清除的同时，用户的线程还会去改变对象的引用，使得原来某些对象不是垃圾，但是当 CMS 进行清理的时候变成了垃圾，CMS 收集器无法收集，只能等到下一次 GC。CMS 收集器无法处理浮动垃圾</li><li>内存碎片：CMS本质上是实现了标记清除算法的收集器（从过程就可以看得出），这会意味着会产生内存碎片</li></ul></li></ul><h4 id="7-G1收集器-年轻代，老年代都用"><a href="#7-G1收集器-年轻代，老年代都用" class="headerlink" title="7. G1收集器(年轻代，老年代都用)"></a>7. <strong>G1收集器</strong>(年轻代，老年代都用)</h4><p>定义：G1是一种基于内存的垃圾回收器</p><p>过程分为4部:</p><ul><li><p>初始标记阶段（Initial Mark）：标记GC Roots引用的对象，并且标记老年代中的存活对象。</p></li><li><p>并发标记阶段（Concurrent Mark）：在此阶段中，应用程序继续运行，同时G1回收器标记存活对象，并更新对象的记忆集以便在下一阶段快速扫描存活对象。</p></li><li><p>最终标记阶段（Final Mark）：在此阶段中，G1回收器暂停应用程序，并扫描所有的存活对象以确保没有被漏标记的对象。</p></li><li><p>筛选回收阶段（Live Data Counting and Evacuation）：在此阶段中，G1回收器根据区域中的垃圾数来筛选需要回收的区域，并将存活对象复制到其他区域中。</p></li></ul><p>特点：</p><ul><li>区域化内存管理:将java堆划分成大小相等的多个区域，每个区域可以是eden区、survivor区或old区。G1垃圾回收器在回收时，会优先回收垃圾最多的区域（Garbage First），以达到更高的回收效率和更短的停顿时间。</li></ul><p>并行与并发：G1垃圾回收器采用并行和并发两种方式进行垃圾回收。在并行阶段，多个线程同时对不同的区域进行垃圾回收；在并发阶段，应用程序继续运行，同时G1垃圾回收器对部分区域进行垃圾回收。</p><p>可预测的停顿时间：G1垃圾回收器可以通过在每个回收周期中预留一定比例的时间来控制回收过程的停顿时间。这样，即使在处理大内存量时，也可以保证可预测的停顿时间。</p><hr><h2 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h2><h4 id="1-标记-清除算法"><a href="#1-标记-清除算法" class="headerlink" title="1. 标记-清除算法"></a>1. 标记-清除算法</h4><blockquote><ol><li>定义：该算法分为“标记”和“清除”阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。</li><li>缺点：（1）效率问题；（2）空间问题（在标记清除后会产生大量不连续的碎片）</li></ol></blockquote><h4 id="2-复制算法（新生代）"><a href="#2-复制算法（新生代）" class="headerlink" title="2. 复制算法（新生代）"></a>2. 复制算法（新生代）</h4><blockquote><ol><li>定义：为了解决效率问题，“复制”收集算法出现了。它可以将内存分为大小相同的两块，每次使用其中的一块。当这一块的内存使用完后，就将还存活的对象复制到另一块去，然后再把使用的空间一次清理掉。这样就使每次的内存回收都是对内存区间的一半进行回收。<br><img src="https://i.postimg.cc/DwDDGwzV/7jpg.jpg"></li></ol></blockquote><h4 id="3-标记-整理算法（老年代）"><a href="#3-标记-整理算法（老年代）" class="headerlink" title="3. 标记-整理算法（老年代）"></a>3. 标记-整理算法（老年代）</h4><blockquote><ol><li>定义：根据老年代的特点提出的一种标记算法，标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象回收，而是让所有存活的对象向一端移动，然后直接清理掉端边界以外的内存。<br><img src="https://i.postimg.cc/k57cBVrX/9.jpg"></li></ol></blockquote><h4 id="4-分代收集"><a href="#4-分代收集" class="headerlink" title="4. 分代收集"></a>4. 分代收集</h4><p>分代收集算法是目前大部分JVM的垃圾收集器采用的算法。它的核心思想是根据对象存活的生命周期将内存划分为若干个不同的区域。一般情况下将堆区划分为老年代（Tenured Generation）和新生代（Young Generation），老年代的特点是每次垃圾收集时只有少量对象需要被回收，而新生代的特点是每次垃圾回收时都有大量的对象需要被回收，那么就可以根据不同代的特点采取最适合的收集算法。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这是第二篇博客</title>
      <link href="/2023/06/14/%E6%88%91%E7%9A%84%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/06/14/%E6%88%91%E7%9A%84%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/06/13/hello-world/"/>
      <url>/2023/06/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Hello-hexo"><a href="#Hello-hexo" class="headerlink" title="Hello hexo"></a>Hello hexo</h2><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>多线程学习</title>
      <link href="/2022/12/21/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2022/12/21/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="多线程学习"><a href="#多线程学习" class="headerlink" title="多线程学习"></a>多线程学习</h1><h3 id="线程和进程"><a href="#线程和进程" class="headerlink" title="线程和进程"></a>线程和进程</h3><p>首先一个程序写出来是静态的，执行起来变成进程，进程执行起来就开始执行线程，线程中含有两个默认的线程：main函数（自己写的线程都在里面），gc线程（垃圾回收线程）jvm给的叫做守护线程</p><ul><li><p>进程是一个应用程序在处理机的一次执行过程。</p></li><li><p>线程是进程中的一部分，进程包含多个线程在运行。</p></li><li><p>进程之间不能共享内存，但线程之间共享内存非常容易。</p></li><li><p>系统创建线程所分配的资源相对创建线程而言，代价非常小</p></li></ul><h3 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h3><ul><li>并行：多个CPU实例或者多台机器同时执行一段处理逻辑，是真正的同时。</li><li>并发：通过CPU调度算法，让用户看上去同时执行，实际上从CPU操作层面不是真正的同时，并发往往在场景中有公用的资源，那么针对这个公用的资源往往产生瓶颈，我们会用TPS或者QPS来反应这个系统的处理能力。</li></ul><h4 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h4><p><img src="https://i.postimg.cc/NfcFBYdX/image.jpg" alt="Untitled"></p><h4 id="Synchronized"><a href="#Synchronized" class="headerlink" title="Synchronized"></a><strong>Synchronized</strong></h4><p>synchronized作用是保证在同一时刻，被修饰的代码块或方法只会有一个线程执行，以达到保证并发安全的效果。</p><p>synchronized是Java中解决并发问题最常用，最简单的方法</p><p><strong>synchronized锁的是对象</strong></p><p>作用：</p><ul><li>原子性：确保线程互斥地访问同步代码；</li><li>可见性：保证共享变量的修改能够及时可见，当一个线程获取对象的锁时，它会将本地内存中的数据刷新到主内存中，其他线程可以看到最新的数据。</li><li>有序性：有效解决重排序问题</li></ul><p>使用方式：</p><ul><li>修饰实例方法：作用于当前实例加锁</li><li>修饰静态方法：作用于当前类对象加锁</li><li>修饰代码块：指定加锁对象，对给定对象加锁</li></ul><p><img src="https://i.postimg.cc/HsJDxW2x/synchronized.jpg"></p><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a><strong>实现原理</strong></h4><ul><li><p>synchronized的语义底层是通过一个monitor的对象来完成的</p></li><li><p>Synchronized在JVM里的实现都是 基于进入和退出Monitor对象来实现方法同步和代码块同步，虽然具体实现细节不一样，但是都可以通过成对的MonitorEnter和MonitorExit指令来实现。</p><ol><li><p><strong>MonitorEnter指令：插入在同步代码块的开始位置，当代码执行到该指令时，将会尝试获取该对象Monitor的所有权，即尝试获得该对象的锁；</strong></p></li><li><p><strong>MonitorExit指令：插入在方法结束处和异常处，JVM保证每个MonitorEnter必须有对应的MonitorExit；</strong></p></li></ol></li><li><p>每个对象都是一个监视器锁（monitor）</p><h4 id="监视器（管程）"><a href="#监视器（管程）" class="headerlink" title="监视器（管程）"></a>监视器（管程）</h4><p>Synchronized是一种基于管程实现的同步机制。</p></li><li><p>在Java虚拟机（HotSpot）中，Monitor是由ObjectMonitor实现的</p></li></ul><p><img src="https://i.postimg.cc/Hn364NC3/image-20230629170039335.png" alt="image-20230629170039335"></p><h4 id="JUC-Lock"><a href="#JUC-Lock" class="headerlink" title="JUC.Lock"></a>JUC.Lock</h4><p>JUC（java.util.concurrent）中的Lock是Java中一种同步机制，它是用来控制多个线程对共享资源的访问的，类似于传统的synchronized关键字，但Lock提供了更多的功能和灵活性。Lock可以用来替代synchronized关键字，提供更细粒度的控制，以及更高的并发性能。</p><p>Lock接口提供了以下几个方法：</p><ol><li>lock()：获取锁，如果锁已经被其他线程占用，则当前线程会被阻塞等待锁的释放。</li><li>unlock()：释放锁，将锁的状态设置为未锁定状态，并唤醒等待该锁的其他线程。</li><li>tryLock()：尝试获取锁，如果锁没有被其他线程占用，则获取锁并返回true，否则返回false。</li><li>tryLock(long timeout, TimeUnit unit)：尝试获取锁，在指定的时间内获取锁，如果在指定时间内没有获取到锁，则返回false。</li></ol><p>Lock接口有多个实现类，其中比较常用的有以下几种：</p><ol><li>ReentrantLock：可重入锁，支持公平锁和非公平锁。</li><li>ReentrantReadWriteLock：可重入读写锁，支持多个读线程同时访问，但只允许一个写线程访问。</li><li>StampedLock：支持锁的升级和降级，可以同时支持读写操作。</li></ol><p>需要注意的是，Lock接口提供了更多的功能和灵活性，但使用Lock也需要注意避免死锁、竞争条件等问题。在使用Lock时，需要仔细考虑锁的粒度、锁的顺序等问题，以确保线程安全性和性能。</p><h4 id="CAS（Compare-And-Swap）"><a href="#CAS（Compare-And-Swap）" class="headerlink" title="CAS（Compare And Swap）"></a>CAS（Compare And Swap）</h4><ol><li><p>定义：CAS是一种原子模型，用于实现多线程之间的同步和互斥。CAS机制中使用了3个基本操作数：内存地址V，旧的预期值A，要修改的新值B。</p><p>更新一个变量的时候，只有当变量的预期值A和内存地址V当中的实际值相同时，才会将内存地址V对应的值修改为B。</p></li><li><p>CAS是一种无锁算法，他避免了使用传统锁机制所带来的性能损失和死锁等问题。</p></li><li><p>用途：在多线程编程中，CAS操作通常用于实现乐观锁、无锁数据结构、并发容器等。他可以替代传统的锁机制，避免了锁带来的性能损失和死锁等问题，同时也提高了代码的可读性和可维护性。</p></li><li><p>缺点：</p><ol><li>CPU开销过大</li><li>不能保证代码块的原子性</li><li>ABA问题：当一个值从A变成B，又更新回A，普通CAS机制会误判通过检测，利用版本号比较可以有效解决ABA问题</li></ol></li></ol><h4 id="Java对象"><a href="#Java对象" class="headerlink" title="Java对象"></a>Java对象</h4><ul><li>HotSpot虚拟机中，对象在内存中存储的布局可分为三个区域：对象头（Header）、实例数据（Instance Data）、和对齐填充（Padding）。Java对象头一般占有2个机器码（64位虚拟机中，1个机器码是8个字节，也就是64bit），但是 如果对象是数组类型，则需要3个机器码，因为JVM虚拟机可以通过Java对象的元数据信息确定Java对象的大小，但是无法从数组的元数据来确认数组的大小，所以用一块来记录数组长度。</li><li>对象头：<ul><li>Mark Word（hash码，对象所属的年代，对象锁，锁状态标志，偏向锁（线程）ID，偏向时间，数组长度（数组对象）等。）</li><li>指向类的指针：大小也通常为32bit，他主要指向类的数据，也就是指向方法区中的位置</li><li>数组长度：只有数组对象才有，在32位或者64位JVM中，长度都是32bit。</li></ul></li><li>实例数据：存放类的属性数据信息，包括父类的属性信息</li><li>对齐填充：由于虚拟机要求 对象起始地址必须是8字节的整数倍。填充数据不是必须存在的，仅仅是为了字节对齐。原因是为了寻址最优，64位机器正好8个字节；</li></ul><p><img src="https://i.postimg.cc/rprvwV78/cca67b35be6a4b498ba1b29859d96a1f.png"></p><p>对象头的最后两位存储了锁的标志位，01是初始状态，未加锁，其对象头里存储的是对象本身的哈希码，随着锁级别的不同，对象头里会存储不同的内容。</p><p>偏向锁存储的是当前占用此对象的线程ID；</p><p>轻量级则存储指向线程栈中锁记录的指针。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库学习</title>
      <link href="/2022/06/21/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2022/06/21/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库相关知识"><a href="#数据库相关知识" class="headerlink" title="数据库相关知识"></a>数据库相关知识</h1><p><a href="https://topjavaer.cn/database/mysql.html">mysql总结</a></p><h3 id="什么是MySQL"><a href="#什么是MySQL" class="headerlink" title="什么是MySQL"></a>什么是MySQL</h3><blockquote><p>MySQL 是一个关系型数据库，它采用表的形式来存储数据。</p></blockquote><h3 id="事务的四大特性"><a href="#事务的四大特性" class="headerlink" title="事务的四大特性"></a>事务的四大特性</h3><ol><li>事务是指一组被视为单独逻辑单元的操作序列，这些操作要么全部执行成功，要么全部失败，不允许部分成功，部分失败。用于保证数据的一致性和完整性。</li><li>事务的特性(ACID)<ol><li>原子性: 事务的操作要么全部成功,要么全部失败</li><li>一致性: 一个事务执行之前和执行之后必须处于一致性的状态</li><li>隔离性: 多个事务并发执行时,每个事务都应该被隔离开来，互相不影响。</li><li>持久性：一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是系统崩溃也不会丢失。</li></ol></li></ol><h3 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h3><ol><li>先了解：脏读、不可重复读、幻读</li></ol><ul><li>脏读：一个事务处理过程中读取到另一个未提交的事务中的数据</li><li>不可重复读：对于数据库中的某个事物，一个事务范围内多次查询却返回了不同的数据值，这是由于在查询的间隔期间，另外一个事务修改并提交了该数据。</li><li>幻读：当某个事务在读取某个范围内的记录时，另外一个事务又在该范围内插入了新的记录。</li><li>不可重复读和脏读的区别：脏读是某一事务读取了另一个事务未提交的脏数据，而不可重复读则是读取了前一事务提交的数据。</li></ul><ol start="2"><li>事务的隔离级别就是为了解决上面的问题</li></ol><ul><li>读未提交（Read uncommitted）最低的隔离级别，允许一个事务读取另一个事务尚未提交的数据。什么都没有解决</li><li>读已提交（Read committed）：允许一个事务读取另一个事务已经提交的数据。可避免脏读的发生。</li><li>可重复读（Repeatable read）：在一个事务中，同一个查询语句多次执行的结果是一致的。解决了脏读和不可重复读，在MySQL中使用MVCC解决了幻读。MySQL的默认隔离级别</li><li>可串行化（Serializable）最高的隔离级别，强制事务串行执行，避免脏读、不可重复读和幻读问题，但是会影响数据库的并发性能。</li></ul><ol start="3"><li>在生产环境大多使用RC<ol><li>在RR隔离级别下，存在间隙锁，导致出现死锁的几率比RC大得多</li><li>在RR，条件列未命中索引会锁表，在RC下，只锁行。</li></ol></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络学习</title>
      <link href="/2021/12/19/%E7%BD%91%E7%BB%9C/"/>
      <url>/2021/12/19/%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><h2 id="网络面试主要点"><a href="#网络面试主要点" class="headerlink" title="网络面试主要点"></a><a href="https://www.bimowo.com/kstudy-web/clienttopic/view.do?topicId=865"><span style="color:red;">网络面试主要点</span></a></h2><h3 id="HTTP协议和HTTPS协议的区别"><a href="#HTTP协议和HTTPS协议的区别" class="headerlink" title="HTTP协议和HTTPS协议的区别"></a>HTTP协议和HTTPS协议的区别</h3><ol><li>安全性<blockquote><p>HTTP是不安全的协议，数据传输过程中不加密，容易被黑客窃取或篡改；而HTTPS是安全的协议，通过SSL&#x2F;TLS协议对数据进行加密，确保数据在传输过程中不被窃取或篡改</p></blockquote></li><li>端口号<blockquote><p>HTTP使用的端口号为80，HTTPS使用的端口是443.</p></blockquote></li><li>性能<blockquote><p>HTTP可以通过浏览器缓存来减少网络带宽的使用，，从而提高性能；而HTTPS的数据传输过程中，由于数据是加密的，所以不能被缓存，这对性能产生一定的影响</p></blockquote></li></ol><hr><h3 id="网络的分层"><a href="#网络的分层" class="headerlink" title="网络的分层"></a>网络的分层</h3><ol><li>应用层：<blockquote><p>支持网络应用，应用协议仅仅是网络应用的一个组成部分，运行在不同主机上的进程则使用应用层协议进行通信。主要的协议有：http、ftp、telnet、smtp、pop3等。</p></blockquote></li><li>传输层:<blockquote><p>负责为信源和信宿提供应用程序进程间的数据传输服务，这一层上主要定义了两个传输协议，传输控制协议即TCP和用户数据报协议UDP。</p></blockquote></li><li>网络层:<blockquote><p>负责将数据报独立地从信源发送到信宿，主要解决路由选择、拥塞控制和网络互联等问题。</p></blockquote></li><li>数据链路层:<blockquote><p>负责将IP数据报封装成合适在物理网络上传输的帧格式并传输，或将从物理网络接收到的帧解封，取出IP数据报交给网络层。</p></blockquote></li><li>物理层:<blockquote><p>负责将比特流在结点间传输，即负责物理传输。该层的协议既与链路有关也与传输介质有关。</p></blockquote></li></ol><h3 id="TCP的三次握手和四次挥手"><a href="#TCP的三次握手和四次挥手" class="headerlink" title="TCP的三次握手和四次挥手"></a><strong>TCP的三次握手和四次挥手</strong></h3><blockquote><p>   三次握手: 双方各自向对方发起建立连接的请求，再各自给对方回应，只不过，中间的 SYN 和 ACK 能合并在一起;<br>四次挥手: 双方各自向对方发起建立连接的请求，再各自给对方回应，只不过，中间的 FIN 和 ACK 不一定能合并在一起</p></blockquote><h4 id="1-建立连接-三次握手"><a href="#1-建立连接-三次握手" class="headerlink" title="1. 建立连接-三次握手"></a>1. 建立连接-三次握手</h4><blockquote><p>   建立连接的过程久石让通信双方验证各自的发送能力和接受能力是否正常</p></blockquote><p> 第一次握手：</p><blockquote><p>客户端发送一个带有SYN（同步序列号）标志的数据包到服务器，表示客户端请求建立连接，并告诉服务器客户端的初始序列号（ISN）|| 客户端什么都不能确认；服务端 确认了对方发送正常，自己接收正常</p></blockquote><p> 第二次握手：  </p><blockquote><p>服务器收到客户端的SYN数据包后，发送一个带有SYN&#x2F;ACK(同步&#x2F;确认)标志的数据包给客户端，表示服务器同意建立连接，并告诉客户端服务器的初始序列号 || 客户端确认了：自己发送、接收正常，对方发送、接收正常；服务端确认了：对方发送正常，自己接收正常</p></blockquote><p>第三次握手：</p><blockquote><p>客户端收到服务器的SYN&#x2F;ACK数据包后，发送一个带有ACK标注的数据包到服务器，表示客户端确认连接以建立 || 客户端确认了：自己发送、接收正常，对方发送、接收正常；服务端确认了：自己发送、接收正常，对方发送、接收正常</p></blockquote><h4 id="为什么要传回SYN，传了SYN，为什么还要传ACK"><a href="#为什么要传回SYN，传了SYN，为什么还要传ACK" class="headerlink" title="为什么要传回SYN，传了SYN，为什么还要传ACK"></a>为什么要传回SYN，传了SYN，为什么还要传ACK</h4><blockquote><ul><li>接收端传回发送端所发送的SYN是为了告诉发送端，我接受到的信号确实就是你所发送的信号。</li></ul></blockquote><blockquote><ul><li>SYN是TCP&#x2F;IP建立连接时使用的握手信号.在客户机和服务器之间建立正常的TCP网络连接时,客户机首先发出一个SYN消息,服务器使用SYN-ACK应答表示接收了这个消息,最后客户机再以ACK(Acknowledgement[汉译：确认字符 ,在数据通信传输中，接收站发给发送站的一种传输控制字符。它表示确认发来的数据已经接受无误。 ]）消息响应.这样在客户机和服务器之间才能建立起可靠的TCP连接,数据才可以在客户机和服务器之间传递.</li></ul></blockquote><h4 id="2-断开连接-四次挥手"><a href="#2-断开连接-四次挥手" class="headerlink" title="2.断开连接-四次挥手"></a>2.断开连接-四次挥手</h4><p>第一次挥手：</p><blockquote><p>   客户端发送一个带有FIN（结束）标志的数据包到服务器，表示客户端已经发送完了所有数据，并请求关闭连接。|| 客户端-发送一个 FIN，用来关闭客户端到服务器的数据传送</p></blockquote><p>第二次挥手：</p><blockquote><p>   服务器收到客户端的FIN数据包后，发送一个带有ACK标志的数据包给客户端，表示服务器已经接收到了客户端的请求，并进入关闭等待状态。|| 服务器-收到这个 FIN，它发回一 个 ACK，确认序号为收到的序号加1 。和 SYN 一样，一个 FIN 将占用一个序号</p></blockquote><p>第三次挥手：</p><blockquote><p>   服务器发送一个带有FIN数据包后，发送一个带有ACK标志的数据包到服务器，表示客户端已经发送完了所有的数据，并请求关闭连接。|| 服务器-关闭与客户端的连接，发送一个FIN给客户端</p></blockquote><p>第四次挥手：</p><blockquote><p>  客户端收到服务器的FIN数据包，发送一个带有ACK标志的数据包到服务器，表示客户端已经接收到服务器的请求，并确认关闭连接。|| 客户端-发回 ACK 报文确认，并将确认序号设置为收到序号加1</p></blockquote><h4 id="为什么要四次挥手"><a href="#为什么要四次挥手" class="headerlink" title="为什么要四次挥手"></a>为什么要四次挥手</h4><blockquote><p>任何一方都可以在数据传送结束后发出连接释放的通知,待对方确认后进入半关闭状态.当另一方也没有数据再发送的时候,则发出连接释放通知,对方确认后就可以关闭了TCP连接.</p></blockquote><hr><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a><span style="color:red;">cookie</span></h3><blockquote><p>Cookie是一种用于在客户端（浏览器）和服务器之间传递数据的小型文本文件。当用户访问网站时，服务器可以向客户端发送一个包含数据的Cookie，客户端可以将Cookie存储在本地，并在后续访问时将其发送给服务器</p></blockquote><ul><li><p>Cookie 的主要作用是用于识别用户并实现用户状态的跟踪，</p></li><li><p>分类</p><ul><li>会话Cookie：临时Cookie记录了用户访问站点时的设置和偏好。用户退出浏览器时，会话cookie就会被删除了。</li><li>持久Cookie：持久cookie的生存时间更长一些；它们存储在硬盘上，浏览器退出，计算机重启时它们仍然存在。通常会用持久cookie维护某个用户会周期性访问的站点的配置文件或登录名。</li></ul></li><li><p>原理：</p><ul><li>用户首次访问网站，Web一无所知</li><li>Web服务器通过Set-Cookie，将cookie存放到浏览器中（自己域名下）内容一般是服务器给每个浏览器创建的一个特定的识别码</li><li>将来用户再次访问同一站点，浏览器会将特定信息再传回服务器，这时让服务器能够识别该浏览器</li><li>于是，服务器端就可以通过这种操作，积累用户的持续行为，比如购物历史或者人物肖像等。</li></ul></li><li><p>特点：</p><ul><li>Cookie具有不可跨域名性</li><li>Cookie过期时间设定</li></ul></li><li><p>用途 </p><ul><li>用户身份验证</li><li>记住用户偏好设置</li><li>购物车功能</li><li>记住用户浏览记录</li></ul></li></ul><h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><ol><li>session定义<blockquote><p>session是存储于服务器端的特殊对象，服务器会为每一个游览器(客户端)创建一个唯一的session。这个session是服务器端共享，每个游览器(客户端)独享的</p></blockquote></li><li>session的存储形式<blockquote><p>session类似于一个Map，里面可以存放多个键值对，是以key-value进行存放的。key必须是一个字符串，value是一个对象。</p></blockquote></li><li><blockquote><p> session就是一个存储于服务器的特殊对象，通过session可以实现数据共享，session有一个JSESSIONID，这个是session的唯一标识，使用它可以查找到session。session是会话级别的，对于每一个客户端来说是独享它所拥有的session的，我们使用session在进行页面跳转时，服务端可以利用session进行数据共享。session由服务器进行控制。session的创建和销毁都是服务器进行管理的。服务器会为每一个客户端创建一个session。</p></blockquote></li><li>Session的常用方法</li></ol><ul><li>request.getSession():得到请求游览器(客户端)对应的session。如果没有，那么就创建应该新的session。如果有那么就返回对应的session</li><li>setAttribute(String s,Object o):在session中存放属性</li><li>getAttribute(String s)：从session中得到s所对应的属性</li><li>removeAttribute(String s)：从session中删除s对应的属性</li><li>getId()：得到session所对应的id</li><li>invalidate()：使session立即无效</li><li>setMaxInactiveInterval(int i)：设置session最大的有效时间。注意，这个有效时间是两次访问服务器所间隔的最大时间，如果超过最大的有效时间，那么这个session就失效了。<strong>session默认过期时间是20min</strong></li></ul><h3 id="cookie和session的区别："><a href="#cookie和session的区别：" class="headerlink" title="cookie和session的区别："></a>cookie和session的区别：</h3><ul><li>cookie保存在客户端，session保存在服务端</li><li>cookie作用于他所表示的path中(url中要包含path)，范围较小。session代表客户端和服务器的一次会话过程，web页面跳转时也可以共享数据，范围是本次会话，客户端关闭也不会消失。会持续到我们设置的session生命周期结束(默认30min)</li><li>使用session需要cookie的配合，cookie用来携带JSESSIONID</li><li>cookie存放在客户端，相对不安全；session保存在服务端，安全</li><li>由于session是存放于服务器的，当有很多客户端访问时，肯定会产生大量的session，这些session会对服务端的性能造成影响。</li></ul><h3 id="servlet"><a href="#servlet" class="headerlink" title="servlet"></a>servlet</h3><p>servlet是单实例多线程</p><hr><h3 id="过滤器和拦截器的区别"><a href="#过滤器和拦截器的区别" class="headerlink" title="过滤器和拦截器的区别"></a>过滤器和拦截器的区别</h3><ol><li>实现原理不同<blockquote><p>过滤器是基于函数回调的,拦截器是基于java的反射机制(动态代理)实现的.一般自定义的过滤器中都会实现一个doFliter()方法, 这个方法有一个FilterChain参数,而实际上他是一个回调接口.</p></blockquote></li><li>使用范围不同<blockquote><p>过滤器实现的是javax.servlet.Filter 接口,而这个接口是在Servlet规范中定义的,也就是说Filter的使用要依赖于Tomcat等容器,导致它只能在web程序中使用. 而拦截器是一个Spring组件，并由Spring容器管理，并不依赖Tomcat等容器。 是可以单独使用的。 拦截器不仅能应用在web程序中，也可以用于Application，Swing等程序中。</p></blockquote></li><li>使用的场景不同<blockquote><p>因为拦截器更接近业务系统,所以拦截器主要用来实现项目中的业务判断的,比如:日志记录,权限判断等业务. 而过滤器通常用来实现通用功能过滤的,比如: 敏感词过滤、响应数据压缩等功能。</p></blockquote></li><li>触发时机不同<blockquote><ul><li>过滤器Filter实在请求进入容器后,半载进入servlet之前进行预处理.请求结束是在servlet处理完以后.</li><li>拦截器Interceptor实在请求进入servlet后,在进入Controller之前进行预处理的,Controller中渲染了对应的视图之后请求结束.</li></ul></blockquote></li><li>拦截请求范围不同<blockquote><p>请求的执行顺序是: 请求进入容器 -&gt; 进入过滤器 -&gt; 进入Servlet  -&gt; 进入拦截器 -&gt; 执行控制器. 可以看出过滤器先执行,然后才会执行拦截器,最后才会进入真正调用的方法. 鸡哥到此一游.</p></blockquote></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客文章</title>
      <link href="/2021/06/13/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
      <url>/2021/06/13/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<p>zheshi </p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>标题</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>movies</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>mustic</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[<p>这是一个音乐</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
