<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>网络学习</title>
      <link href="/2023/06/19/%E7%BD%91%E7%BB%9C/"/>
      <url>/2023/06/19/%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><h2 id="网络面试主要点"><a href="#网络面试主要点" class="headerlink" title="网络面试主要点"></a><a href="https://www.bimowo.com/kstudy-web/clienttopic/view.do?topicId=865"><span style="color:red;">网络面试主要点</span></a></h2><h3 id="HTTP协议和HTTPS协议的区别"><a href="#HTTP协议和HTTPS协议的区别" class="headerlink" title="HTTP协议和HTTPS协议的区别"></a>HTTP协议和HTTPS协议的区别</h3><ol><li>安全性<blockquote><p>HTTP是不安全的协议，数据传输过程中不加密，容易被黑客窃取或篡改；而HTTPS是安全的协议，通过SSL&#x2F;TLS协议对数据进行加密，确保数据在传输过程中不被窃取或篡改</p></blockquote></li><li>端口号<blockquote><p>HTTP使用的端口号为80，HTTPS使用的端口是443.</p></blockquote></li><li>性能<blockquote><p>HTTP可以通过浏览器缓存来减少网络带宽的使用，，从而提高性能；而HTTPS的数据传输过程中，由于数据是加密的，所以不能被缓存，这对性能产生一定的影响</p></blockquote></li></ol><hr><h3 id="网络的分层"><a href="#网络的分层" class="headerlink" title="网络的分层"></a>网络的分层</h3><ol><li>应用层：<blockquote><p>支持网络应用，应用协议仅仅是网络应用的一个组成部分，运行在不同主机上的进程则使用应用层协议进行通信。主要的协议有：http、ftp、telnet、smtp、pop3等。</p></blockquote></li><li>传输层:<blockquote><p>负责为信源和信宿提供应用程序进程间的数据传输服务，这一层上主要定义了两个传输协议，传输控制协议即TCP和用户数据报协议UDP。</p></blockquote></li><li>网络层:<blockquote><p>负责将数据报独立地从信源发送到信宿，主要解决路由选择、拥塞控制和网络互联等问题。</p></blockquote></li><li>数据链路层:<blockquote><p>负责将IP数据报封装成合适在物理网络上传输的帧格式并传输，或将从物理网络接收到的帧解封，取出IP数据报交给网络层。</p></blockquote></li><li>物理层:<blockquote><p>负责将比特流在结点间传输，即负责物理传输。该层的协议既与链路有关也与传输介质有关。</p></blockquote></li></ol><h3 id="TCP的三次握手和四次挥手"><a href="#TCP的三次握手和四次挥手" class="headerlink" title="TCP的三次握手和四次挥手"></a><strong>TCP的三次握手和四次挥手</strong></h3><blockquote><p>   三次握手: 双方各自向对方发起建立连接的请求，再各自给对方回应，只不过，中间的 SYN 和 ACK 能合并在一起;<br>四次挥手: 双方各自向对方发起建立连接的请求，再各自给对方回应，只不过，中间的 FIN 和 ACK 不一定能合并在一起</p></blockquote><h4 id="1-建立连接-三次握手"><a href="#1-建立连接-三次握手" class="headerlink" title="1. 建立连接-三次握手"></a>1. 建立连接-三次握手</h4><blockquote><p>   建立连接的过程久石让通信双方验证各自的发送能力和接受能力是否正常</p></blockquote><p> 第一次握手：</p><blockquote><p>客户端发送一个带有SYN（同步序列号）标志的数据包到服务器，表示客户端请求建立连接，并告诉服务器客户端的初始序列号（ISN）|| 客户端什么都不能确认；服务端 确认了对方发送正常，自己接收正常</p></blockquote><p> 第二次握手：</p><blockquote><p>服务器收到客户端的SYN数据包后，发送一个带有SYN&#x2F;ACK(同步&#x2F;确认)标志的数据包给客户端，表示服务器同意建立连接，并告诉客户端服务器的初始序列号 || 客户端确认了：自己发送、接收正常，对方发送、接收正常；服务端确认了：对方发送正常，自己接收正常</p></blockquote><p>第三次握手：</p><blockquote><p>客户端收到服务器的SYN&#x2F;ACK数据包后，发送一个带有ACK标注的数据包到服务器，表示客户端确认连接以建立 || 客户端确认了：自己发送、接收正常，对方发送、接收正常；服务端确认了：自己发送、接收正常，对方发送、接收正常</p></blockquote><h4 id="为什么要传回SYN，传了SYN，为什么还要传ACK"><a href="#为什么要传回SYN，传了SYN，为什么还要传ACK" class="headerlink" title="为什么要传回SYN，传了SYN，为什么还要传ACK"></a>为什么要传回SYN，传了SYN，为什么还要传ACK</h4><ol><li><blockquote><p>接收端传回发送端所发送的SYN是为了告诉发送端，我接受到的信号确实就是你所发送的信号。</p></blockquote></li><li><blockquote><p>SYN是TCP&#x2F;IP建立连接时使用的握手信号.在客户机和服务器之间建立正常的TCP网络连接时,客户机首先发出一个SYN消息,服务器使用SYN-ACK应答表示接收了这个消息,最后客户机再以ACK(Acknowledgement[汉译：确认字符 ,在数据通信传输中，接收站发给发送站的一种传输控制字符。它表示确认发来的数据已经接受无误。 ]）消息响应.这样在客户机和服务器之间才能建立起可靠的TCP连接,数据才可以在客户机和服务器之间传递.</p></blockquote></li></ol><h4 id="2-断开连接-四次挥手"><a href="#2-断开连接-四次挥手" class="headerlink" title="2.断开连接-四次挥手"></a>2.断开连接-四次挥手</h4><p>第一次挥手：</p><blockquote><p>   客户端发送一个带有FIN（结束）标志的数据包到服务器，表示客户端已经发送完了所有数据，并请求关闭连接。|| 客户端-发送一个 FIN，用来关闭客户端到服务器的数据传送</p></blockquote><p>第二次挥手：</p><blockquote><p>   服务器收到客户端的FIN数据包后，发送一个带有ACK标志的数据包给客户端，表示服务器已经接收到了客户端的请求，并进入关闭等待状态。|| 服务器-收到这个 FIN，它发回一 个 ACK，确认序号为收到的序号加1 。和 SYN 一样，一个 FIN 将占用一个序号</p></blockquote><p>第三次挥手：</p><blockquote><p>   服务器发送一个带有FIN数据包后，发送一个带有ACK标志的数据包到服务器，表示客户端已经发送完了所有的数据，并请求关闭连接。|| 服务器-关闭与客户端的连接，发送一个FIN给客户端</p></blockquote><p>第四次挥手：</p><blockquote><p>  客户端收到服务器的FIN数据包，发送一个带有ACK标志的数据包到服务器，表示客户端已经接收到服务器的请求，并确认关闭连接。|| 客户端-发回 ACK 报文确认，并将确认序号设置为收到序号加1</p></blockquote><h4 id="为什么要四次挥手"><a href="#为什么要四次挥手" class="headerlink" title="为什么要四次挥手"></a>为什么要四次挥手</h4><blockquote><p>任何一方都可以在数据传送结束后发出连接释放的通知,待对方确认后进入半关闭状态.当另一方也没有数据再发送的时候,则发出连接释放通知,对方确认后就可以关闭了TCP连接.</p></blockquote><hr><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a><span style="color:red;">cookie</span></h3><blockquote><p>Cookie是一种用于在客户端（浏览器）和服务器之间传递数据的小型文本文件。当用户访问网站时，服务器可以向客户端发送一个包含数据的Cookie，客户端可以将Cookie存储在本地，并在后续访问时将其发送给服务器</p></blockquote><ul><li><p>Cookie 的主要作用是用于识别用户并实现用户状态的跟踪，</p></li><li><p>分类</p><ul><li>会话Cookie：临时Cookie记录了用户访问站点时的设置和偏好。用户退出浏览器时，会话cookie就会被删除了。</li><li>持久Cookie：持久cookie的生存时间更长一些；它们存储在硬盘上，浏览器退出，计算机重启时它们仍然存在。通常会用持久cookie维护某个用户会周期性访问的站点的配置文件或登录名。</li></ul></li><li><p>原理：</p><ul><li>用户首次访问网站，Web一无所知</li><li>Web服务器通过Set-Cookie，将cookie存放到浏览器中（自己域名下）内容一般是服务器给每个浏览器创建的一个特定的识别码</li><li>将来用户再次访问同一站点，浏览器会将特定信息再传回服务器，这时让服务器能够识别该浏览器</li><li>于是，服务器端就可以通过这种操作，积累用户的持续行为，比如购物历史或者人物肖像等。</li></ul></li><li><p>特点：</p><ul><li>Cookie具有不可跨域名性</li><li>Cookie过期时间设定</li></ul></li><li><p>用途 </p><ul><li>用户身份验证</li><li>记住用户偏好设置</li><li>购物车功能</li><li>记住用户浏览记录</li></ul></li></ul><h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><ol><li>session定义<blockquote><p>session是存储于服务器端的特殊对象，服务器会为每一个游览器(客户端)创建一个唯一的session。这个session是服务器端共享，每个游览器(客户端)独享的</p></blockquote></li><li>session的存储形式<blockquote><p>session类似于一个Map，里面可以存放多个键值对，是以key-value进行存放的。key必须是一个字符串，value是一个对象。</p></blockquote></li><li><blockquote><p> session就是一个存储于服务器的特殊对象，通过session可以实现数据共享，session有一个JSESSIONID，这个是session的唯一标识，使用它可以查找到session。session是会话级别的，对于每一个客户端来说是独享它所拥有的session的，我们使用session在进行页面跳转时，服务端可以利用session进行数据共享。session由服务器进行控制。session的创建和销毁都是服务器进行管理的。服务器会为每一个客户端创建一个session。</p></blockquote></li><li>Session的常用方法</li></ol><ul><li>request.getSession():得到请求游览器(客户端)对应的session。如果没有，那么就创建应该新的session。如果有那么就返回对应的session</li><li>setAttribute(String s,Object o):在session中存放属性</li><li>getAttribute(String s)：从session中得到s所对应的属性</li><li>removeAttribute(String s)：从session中删除s对应的属性</li><li>getId()：得到session所对应的id</li><li>invalidate()：使session立即无效</li><li>setMaxInactiveInterval(int i)：设置session最大的有效时间。注意，这个有效时间是两次访问服务器所间隔的最大时间，如果超过最大的有效时间，那么这个session就失效了。<strong>session默认过期时间是20min</strong></li></ul><h3 id="cookie和session的区别："><a href="#cookie和session的区别：" class="headerlink" title="cookie和session的区别："></a>cookie和session的区别：</h3><ul><li>cookie保存在客户端，session保存在服务端</li><li>cookie作用于他所表示的path中(url中要包含path)，范围较小。session代表客户端和服务器的一次会话过程，web页面跳转时也可以共享数据，范围是本次会话，客户端关闭也不会消失。会持续到我们设置的session生命周期结束(默认30min)</li><li>使用session需要cookie的配合，cookie用来携带JSESSIONID</li><li>cookie存放在客户端，相对不安全；session保存在服务端，安全</li><li>由于session是存放于服务器的，当有很多客户端访问时，肯定会产生大量的session，这些session会对服务端的性能造成影响。</li></ul><h3 id="servlet"><a href="#servlet" class="headerlink" title="servlet"></a>servlet</h3><p>servlet是单实例多线程</p><hr><h3 id="过滤器和拦截器的区别"><a href="#过滤器和拦截器的区别" class="headerlink" title="过滤器和拦截器的区别"></a>过滤器和拦截器的区别</h3><ol><li>实现原理不同<blockquote><p>过滤器是基于函数回调的,拦截器是基于java的反射机制(动态代理)实现的.一般自定义的过滤器中都会实现一个doFliter()方法, 这个方法有一个FilterChain参数,而实际上他是一个回调接口.</p></blockquote></li><li>使用范围不同<blockquote><p>过滤器实现的是javax.servlet.Filter 接口,而这个接口是在Servlet规范中定义的,也就是说Filter的使用要依赖于Tomcat等容器,导致它只能在web程序中使用. 而拦截器是一个Spring组件，并由Spring容器管理，并不依赖Tomcat等容器。 是可以单独使用的。 拦截器不仅能应用在web程序中，也可以用于Application，Swing等程序中。</p></blockquote></li><li>使用的场景不同<blockquote><p>因为拦截器更接近业务系统,所以拦截器主要用来实现项目中的业务判断的,比如:日志记录,权限判断等业务. 而过滤器通常用来实现通用功能过滤的,比如: 敏感词过滤、响应数据压缩等功能。</p></blockquote></li><li>触发时机不同<blockquote><ul><li>过滤器Filter实在请求进入容器后,半载进入servlet之前进行预处理.请求结束是在servlet处理完以后.</li><li>拦截器Interceptor实在请求进入servlet后,在进入Controller之前进行预处理的,Controller中渲染了对应的视图之后请求结束.</li></ul></blockquote></li><li>拦截请求范围不同<blockquote><p>请求的执行顺序是: 请求进入容器 -&gt; 进入过滤器 -&gt; 进入Servlet  -&gt; 进入拦截器 -&gt; 执行控制器. 可以看出过滤器先执行,然后才会执行拦截器,最后才会进入真正调用的方法. 鸡哥到此一游.</p></blockquote></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM学习</title>
      <link href="/2023/06/14/JVM/"/>
      <url>/2023/06/14/JVM/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h1><hr><h2 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h2><p>  把.class文件，加载到内存当中构建类对象分为三步：</p><blockquote><ol><li><strong>加载</strong>:(1)通过类型的完全限定名,产生一个代表该类型的二进制数据流;(2)解析这个二进制数据流为方法区的内部数据结;(3)构建一个表示该类型的java.lang.Class类的实例.</li><li><strong>连接</strong>:(1)验证;(2)准备;(3)解析.</li><li><strong>初始化</strong></li></ol></blockquote><hr><h2 id="JVM的内存结构"><a href="#JVM的内存结构" class="headerlink" title="JVM的内存结构"></a>JVM的内存结构</h2><p><img src="https://i.postimg.cc/L4wnmzMd/jvm1.png" alt="jvm1.png"></p><h3 id="JVM内存空间分布如下"><a href="#JVM内存空间分布如下" class="headerlink" title="JVM内存空间分布如下:"></a>JVM内存空间分布如下:</h3><ul><li><p>程序计数器(<strong>线程私有的</strong>)</p><blockquote><p>每个程序都有一个程序计数器,是<strong>线程私有的</strong>,指向方法区中的方法字节码:<strong>用来存储指向一条指令的地址,也即将要执行的下一条指令代码</strong>.</p></blockquote></li><li><p>Java虚拟机栈(<strong>线程私有的</strong>)<br><img src="https://i.postimg.cc/sf4h2xsf/2.jpg" alt="栈"></p><ul><li>栈:每个线程在创建时都会创建一个虚拟机栈,内部存储的一个个栈帧(Stack Frame),对应Java方法调用.其生命周期和线程一致,<strong>随着线程的结束而销毁</strong>.</li><li>特点:快速有效的分配存储方式,访问速度仅次于程序计数器.JVM对Java栈的操作只有两个:<br>(1). 每个方法执行,伴随着进栈(入栈,压栈);<br>(2). 执行结束后的出栈工作;<br>(3). 栈不存在垃圾回收问题(栈存在溢出情况);可以通过-Xss来设置线程的最大栈空间。</li></ul></li><li><p>本地方法栈(<strong>线程私有的</strong>)</p></li></ul><blockquote><p>管理本地方法的调用,存放native修饰的方法</p></blockquote><ul><li><p>堆(<strong>线程共享的</strong>)</p><ul><li>内存空间当中最大的区域，<strong>存放new出来的对象</strong>；垃圾回收主要发生在堆中<br> <img src="https://i.postimg.cc/Bn9yqmg1/image.jpg" alt="&quot;堆内存结构&quot;"></li><li>可以通过-Xms：设置堆区的起始内存；—Xmx设置堆区的最大内存</li><li></li></ul></li><li><p>方法区(<strong>线程共享的</strong>)</p><ul><li>主要是用来存放已被虚拟机加载的类相关信息：包括类信息(类的版本、字段、方法、接口和父类等)、常量池(静态常量池和运行时常量池)</li><li><strong>在JDK1.8之前，方法区的实现从永久代改为元空间</strong></li><li>在JDK1.6之前的版本，常量池都存储在方法区；</li><li>JDK1.7中，静态常量池存放到了堆中，而运行时常量池海仍然存储在方法区中；</li><li>JDK1.8中，类型信息、字段、方法、常量保存在本地内存的云空间上，静态常量池和运行时常量池都存放在堆中。</li><li>Minor GC 发生在新生代；<strong>主要采用复制算法</strong><blockquote><p>new出来的对象会放在Eden区，当Eden区满了之后会触发GC操作，此时MinorGC会把Eden和Survivor From的对象进行收集，将存活的对象放到Survivor To区，同时年龄+1；当Survivor to中的对象经历15次GC操作仍然存活将会移到老年代。注：只有Eden区满了才会触发MinorGC操作，Survivor区满了不会触发。</p></blockquote></li><li>Major GC 发生在老年代<blockquote><p>当出现老年代空间不足时，会先尝试触发MinorGC。如果之后空间还是不足，则触发MajorGC。</p></blockquote></li><li>Full GC：发生在整个Java堆和方法区<ul><li>触发条件：<blockquote><ul><li>调用System.gc()时，系统建议执行Full GC，但是不必然执行；</li><li>老年代空间不足。</li><li>方法区空间不足。 </li><li>通过Minor GC后进入老年代的平均水平大于老年代的可用内存。</li><li>由Eden区、survivor spacee（From Space）区向survivor spacel（To Space）区复制时，对象大小大于To Space可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小。</li></ul></blockquote></li></ul></li></ul></li><li><p>直接内存</p></li></ul><hr><h2 id="判断对象死亡的两种方法"><a href="#判断对象死亡的两种方法" class="headerlink" title="判断对象死亡的两种方法"></a>判断对象死亡的两种方法</h2><p>1.引用计数法</p><blockquote><ul><li>当对象被引用了则+1，但对象引用失败则-1.当计数器为0时，说明对象不再被引用，可以被回收。</li><li>缺点：如果对象存在循环依赖，那就无法定位该对象是否应该被回收（A依赖B，B依赖A）</li></ul></blockquote><p>2.<strong>可达性分析法</strong></p><blockquote><ol><li>他从<strong>GC Roots</strong>开始向下搜索，节点所走过的路径成为引用链，当一个对象到GC Roots没有任何引用链相连的话，则证明此对象是不可用的。</li><li>在进行时会用到oopmap, oopmap是Java HotSpot虚拟机中的一种数据结构，用于标记一个对象的哪些字段是指向其他对象的引用。oopmap的全称是”Object Oriented Pointer Map”，其主要作用是帮助垃圾回收器判断对象中哪些引用是指向其他对象的，从而进行准确的垃圾回收。<br><img src="https://i.postimg.cc/sDRHgZ1q/6.jpg"></li></ol></blockquote><h3 id="GC-Roots"><a href="#GC-Roots" class="headerlink" title="GC Roots"></a><strong>GC Roots</strong></h3><ul><li><p>定义：GC Roots是指程序中被认为是活动和正在使用的对象。</p></li><li><p>类型：</p><ol><li>虚拟机栈（栈帧中的本地变量表）中引用的对象</li></ol><ul><li>a 是栈帧中的本地变量，当 a &#x3D; null 时，由于此时 a 充当了 GC Root 的作用，a 与原来指向的实例 new Test() 断开了连接，所以对象会被回收。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public  class Test &#123;</span><br><span class="line">  public static  void main(String[] args)&#123;</span><br><span class="line">    Test a = new Test;</span><br><span class="line">    a = null;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>本地方法栈中JNI（即Native方法）引用的对象</li></ol><ul><li>如下代码所示，当栈帧中的本地变量 a &#x3D; null 时，由于 a 原来指向的对象与 GC Root (变量 a) 断开了连接，所以 a 原来指向的对象会被回收，而由于我们给 s 赋值了变量的引用，s 在此时是类静态属性引用，充当了 GC Root 的作用，它指向的对象依然存活!  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">  public static Test s;</span><br><span class="line">  public static  void main(String[] args) &#123;</span><br><span class="line">    Test a = new Test();</span><br><span class="line">    a.s = new Test();</span><br><span class="line">    a = null;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>方法区中类静态属性引用的对象</li></ol><ul><li>如下代码所示，常量 s 指向的对象并不会因为 a 指向的对象被回收而回收 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">  public static final Test s = new Test();</span><br><span class="line">  public static void main(String[] args) &#123;</span><br><span class="line">  Test a = new Test();</span><br><span class="line">  a = null;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li>方法区中常量引用的对象</li></ol></li></ul><h3 id="STW-stop-the-world"><a href="#STW-stop-the-world" class="headerlink" title="STW(stop the world)"></a>STW(stop the world)</h3><ul><li>定义：指GC事件发生过程中，会产生应用程序的停顿。停顿产生时整个应用线程都会被暂停，没有任何响应。</li><li>可达性分析算法中枚举根节点(GC Roots)会导致所有Java执行线程停顿。</li><li>STW是JVM在后台自动发起和自动完成的。在用户不可见的情况下，把用户正常的工作线程全部停掉。</li></ul><hr><p><img src="https://i.postimg.cc/V6Mvhjqw/junk.jpg"></p><hr><h2 id="常见的垃圾回收器"><a href="#常见的垃圾回收器" class="headerlink" title="常见的垃圾回收器"></a>常见的垃圾回收器</h2><h4 id="1-Serial收集器"><a href="#1-Serial收集器" class="headerlink" title="1. Serial收集器"></a>1. Serial收集器</h4><blockquote><p>串行收集器是最古老，最稳定以及效率高的收集器，可能会产生较长的停顿，<strong>只能用一个线程去回收。新生代、老年代使用串行回收；新生代复制算法、老年代标记-压缩；在垃圾收集过程会STW</strong></p></blockquote><h4 id="2-Serial-Old收集器"><a href="#2-Serial-Old收集器" class="headerlink" title="2. Serial Old收集器"></a>2. Serial Old收集器</h4><h4 id="3-ParNew收集器"><a href="#3-ParNew收集器" class="headerlink" title="3. ParNew收集器"></a>3. ParNew收集器</h4><blockquote><p><strong>新生代并行，老年代串行；新生代复制算法，老年代标记-压缩；使用多线程</strong></p></blockquote><h4 id="4-Parallel-Scavenage收集器"><a href="#4-Parallel-Scavenage收集器" class="headerlink" title="4. Parallel Scavenage收集器"></a>4. Parallel Scavenage收集器</h4><blockquote><p>Parallel Scavenge收集器类似ParNew收集器，Parallel收集器更关注系统的吞吐量。</p></blockquote><h4 id="5-parallel-Old收集器"><a href="#5-parallel-Old收集器" class="headerlink" title="5. parallel Old收集器"></a>5. parallel Old收集器</h4><blockquote><p>arallel Old是Parallel Scavenge收集器的老年代版本，使用多线程和“标记－整理”算法。这个收集器是在JDK 1.6中才开始提供。</p></blockquote><h4 id="6-CMS收集器（Concurrent-Mark-Sweep）"><a href="#6-CMS收集器（Concurrent-Mark-Sweep）" class="headerlink" title="6. CMS收集器（Concurrent Mark Sweep）"></a>6. <strong>CMS收集器</strong>（Concurrent Mark Sweep）</h4><blockquote><ol><li>定义：CMS收集器是一种以获取最短回收停顿时间为目标的收集器。</li><li>基于“标记-清除”算法实现的，分为四部：</li></ol><ul><li>初始标记(会发生STW)<blockquote><p>初始标记会标记GCRoots直接关联的对象以及年轻代指向老年代的对象</p></blockquote></li><li>并发标记<blockquote><p>不会停止用户线程的（不会发生 Stop The World）。这一阶段主要是从GC Roots向下追溯，标记所有可达的对象。</p></blockquote></li><li>重新标记(会发生STW)\<blockquote><p>重新标记阶段会Stop The World，这个过程的停顿时间其实很大程度上取决于上面并发预处理阶段（可以发现，这是一个追赶的过程：一边在标记存活对象，一边用户线程在执行产生垃圾）</p></blockquote></li><li>并发清除<blockquote><p>并发清除阶段，不会Stop The World一边用户线程在执行，一边GC线程在回收不可达的对象.这个过程，还是有可能用户线程在不断产生垃圾，但只能留到下一次GC 进行处理了，产生的这些垃圾被叫做“浮动垃圾”</p></blockquote></li></ul><ol start="3"><li>缺点：</li></ol><ul><li>空间需要预留位置，CMS垃圾收集器可以一边回收垃圾，一边处理用户线程，那需要在这个过程中保证有充足的内存空间供用户使用。</li><li>浮动垃圾：由于垃圾回收和用户线程是同时进行的，在进行标记或者清除的同时，用户的线程还会去改变对象的引用，使得原来某些对象不是垃圾，但是当 CMS 进行清理的时候变成了垃圾，CMS 收集器无法收集，只能等到下一次 GC。CMS 收集器无法处理浮动垃圾</li><li>内存碎片：CMS本质上是实现了标记清除算法的收集器（从过程就可以看得出），这会意味着会产生内存碎片</li></ul></blockquote><h4 id="7-G1收集器"><a href="#7-G1收集器" class="headerlink" title="7. G1收集器"></a>7. <strong>G1收集器</strong></h4><blockquote><ol><li>定义：G1是一种基于内存的垃圾回收器</li><li>过程分为4部:</li></ol><ul><li>初始标记阶段（Initial Mark）：标记GC Roots引用的对象，并且标记老年代中的存活对象。<br>*并发标记阶段（Concurrent Mark）：在此阶段中，应用程序继续运行，同时G1回收器标记存活对象，并更新对象的记忆集以便在下一阶段快速扫描存活对象。<br>*最终标记阶段（Final Mark）：在此阶段中，G1回收器暂停应用程序，并扫描所有的存活对象以确保没有被漏标记的对象。<br>*筛选回收阶段（Live Data Counting and Evacuation）：在此阶段中，G1回收器根据区域中的垃圾数来筛选需要回收的区域，并将存活对象复制到其他区域中。</li></ul><ol start="3"><li>特点：</li></ol><ul><li>区域化内存管理:将java堆划分成大小相等的多个区域，每个区域可以是eden区、survivor区或old区。G1垃圾回收器在回收时，会优先回收垃圾最多的区域（Garbage First），以达到更高的回收效率和更短的停顿时间。</li><li>并行与并发：G1垃圾回收器采用并行和并发两种方式进行垃圾回收。在并行阶段，多个线程同时对不同的区域进行垃圾回收；在并发阶段，应用程序继续运行，同时G1垃圾回收器对部分区域进行垃圾回收。</li><li>可预测的停顿时间：G1垃圾回收器可以通过在每个回收周期中预留一定比例的时间来控制回收过程的停顿时间。这样，即使在处理大内存量时，也可以保证可预测的停顿时间。</li></ul></blockquote><hr><h2 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h2><h4 id="1-标记-清除算法"><a href="#1-标记-清除算法" class="headerlink" title="1. 标记-清除算法"></a>1. 标记-清除算法</h4><blockquote><ol><li>定义：该算法分为“标记”和“清除”阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。</li><li>缺点：（1）效率问题；（2）空间问题（在标记清除后会产生大量不连续的碎片）</li></ol></blockquote><h4 id="2-复制算法"><a href="#2-复制算法" class="headerlink" title="2. 复制算法"></a>2. 复制算法</h4><blockquote><ol><li>定义：为了解决效率问题，“复制”收集算法出现了。它可以将内存分为大小相同的两块，每次使用其中的一块。当这一块的内存使用完后，就将还存活的对象复制到另一块去，然后再把使用的空间一次清理掉。这样就使每次的内存回收都是对内存区间的一半进行回收。<br><img src="https://i.postimg.cc/DwDDGwzV/7jpg.jpg"></li></ol></blockquote><h4 id="3-标记-整理算法"><a href="#3-标记-整理算法" class="headerlink" title="3. 标记-整理算法"></a>3. 标记-整理算法</h4><blockquote><ol><li>定义：根据老年代的特点提出的一种标记算法，标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象回收，而是让所有存活的对象向一端移动，然后直接清理掉端边界以外的内存。<br><img src="https://i.postimg.cc/k57cBVrX/9.jpg"></li></ol></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这是第二篇博客</title>
      <link href="/2023/06/14/%E6%88%91%E7%9A%84%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/06/14/%E6%88%91%E7%9A%84%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客文章</title>
      <link href="/2023/06/13/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
      <url>/2023/06/13/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<p>zheshi </p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/06/13/hello-world/"/>
      <url>/2023/06/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Hello-hexo"><a href="#Hello-hexo" class="headerlink" title="Hello hexo"></a>Hello hexo</h2><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>标题</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>mustic</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[<p>这是一个音乐</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>movies</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
